class androidx.appcompat.widget.TooltipCompatHandler extends java.lang.Object implements android.view.View$OnLongClickListener, android.view.View$OnHoverListener, android.view.View$OnAttachStateChangeListener
{
    private static final long HOVER_HIDE_TIMEOUT_MS;
    private static final long HOVER_HIDE_TIMEOUT_SHORT_MS;
    private static final long LONG_CLICK_HIDE_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private static androidx.appcompat.widget.TooltipCompatHandler sActiveHandler;
    private static androidx.appcompat.widget.TooltipCompatHandler sPendingHandler;
    private final android.view.View mAnchor;
    private int mAnchorX;
    private int mAnchorY;
    private boolean mFromTouch;
    private final java.lang.Runnable mHideRunnable;
    private final int mHoverSlop;
    private androidx.appcompat.widget.TooltipPopup mPopup;
    private final java.lang.Runnable mShowRunnable;
    private final java.lang.CharSequence mTooltipText;

    private void <init>(android.view.View, java.lang.CharSequence)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.View $r1;
        java.lang.CharSequence $r2;
        androidx.appcompat.widget.TooltipCompatHandler$1 $r3;
        androidx.appcompat.widget.TooltipCompatHandler$2 $r4;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;
        int $i0;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: java.lang.CharSequence;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = new androidx.appcompat.widget.TooltipCompatHandler$1;

        specialinvoke $r3.<androidx.appcompat.widget.TooltipCompatHandler$1: void <init>(androidx.appcompat.widget.TooltipCompatHandler)>($r0);

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.Runnable mShowRunnable> = $r3;

        $r4 = new androidx.appcompat.widget.TooltipCompatHandler$2;

        specialinvoke $r4.<androidx.appcompat.widget.TooltipCompatHandler$2: void <init>(androidx.appcompat.widget.TooltipCompatHandler)>($r0);

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.Runnable mHideRunnable> = $r4;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor> = $r1;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.CharSequence mTooltipText> = $r2;

        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r5 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $i0 = staticinvoke <androidx.core.view.ViewConfigurationCompat: int getScaledHoverSlop(android.view.ViewConfiguration)>($r6);

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mHoverSlop> = $i0;

        specialinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: void clearAnchorPos()>();

        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        virtualinvoke $r1.<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>($r0);

        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        virtualinvoke $r1.<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>($r0);

        return;
    }

    private void cancelPendingShow()
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.View $r1;
        java.lang.Runnable $r2;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.Runnable mShowRunnable>;

        virtualinvoke $r1.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

        return;
    }

    private void clearAnchorPos()
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorX> = 2147483647;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorY> = 2147483647;

        return;
    }

    private void scheduleShow()
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.View $r1;
        java.lang.Runnable $r2;
        int $i0;
        long $l1;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.Runnable mShowRunnable>;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l1 = (long) $i0;

        virtualinvoke $r1.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r2, $l1);

        return;
    }

    private static void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0, $r1;

        $r0 := @parameter0: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 = <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sPendingHandler>;

        if $r1 == null goto label1;

        specialinvoke $r1.<androidx.appcompat.widget.TooltipCompatHandler: void cancelPendingShow()>();

     label1:
        <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sPendingHandler> = $r0;

        $r0 = <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sPendingHandler>;

        if $r0 == null goto label2;

        specialinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: void scheduleShow()>();

     label2:
        return;
    }

    public static void setTooltipText(android.view.View, java.lang.CharSequence)
    {
        android.view.View $r0, $r2;
        java.lang.CharSequence $r1;
        boolean $z0;
        androidx.appcompat.widget.TooltipCompatHandler $r3;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: java.lang.CharSequence;

        $r3 = <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sPendingHandler>;

        if $r3 == null goto label1;

        $r2 = $r3.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        if $r2 != $r0 goto label1;

        staticinvoke <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>(null);

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label3;

        $r3 = <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sActiveHandler>;

        if $r3 == null goto label2;

        $r2 = $r3.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        if $r2 != $r0 goto label2;

        virtualinvoke $r3.<androidx.appcompat.widget.TooltipCompatHandler: void hide()>();

     label2:
        virtualinvoke $r0.<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>(null);

        virtualinvoke $r0.<android.view.View: void setLongClickable(boolean)>(0);

        virtualinvoke $r0.<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>(null);

        return;

     label3:
        $r3 = new androidx.appcompat.widget.TooltipCompatHandler;

        specialinvoke $r3.<androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)>($r0, $r1);

        return;
    }

    private boolean updateAnchorPos(android.view.MotionEvent)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.MotionEvent $r1;
        float $f0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 := @parameter0: android.view.MotionEvent;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $i0 = (int) $f0;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $i1 = (int) $f0;

        $i2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorX>;

        $i2 = $i0 - $i2;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $i3 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mHoverSlop>;

        if $i2 > $i3 goto label1;

        $i2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorY>;

        $i2 = $i1 - $i2;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $i3 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mHoverSlop>;

        if $i2 > $i3 goto label1;

        return 0;

     label1:
        $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorX> = $i0;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorY> = $i1;

        return 1;
    }

    void hide()
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0, $r1;
        androidx.appcompat.widget.TooltipPopup $r2;
        android.view.View $r3;
        java.lang.Runnable $r4;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 = <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sActiveHandler>;

        if $r1 != $r0 goto label2;

        <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sActiveHandler> = null;

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipPopup mPopup>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.appcompat.widget.TooltipPopup: void hide()>();

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipPopup mPopup> = null;

        specialinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: void clearAnchorPos()>();

        $r3 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        virtualinvoke $r3.<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r0);

        goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TooltipCompatHandler", "sActiveHandler.mPopup == null");

     label2:
        $r1 = <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sPendingHandler>;

        if $r1 != $r0 goto label3;

        staticinvoke <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>(null);

     label3:
        $r3 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r4 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.Runnable mHideRunnable>;

        virtualinvoke $r3.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r4);

        return;
    }

    public boolean onHover(android.view.View, android.view.MotionEvent)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.View $r1;
        android.view.MotionEvent $r2;
        androidx.appcompat.widget.TooltipPopup $r3;
        boolean $z0;
        android.content.Context $r4;
        java.lang.Object $r5;
        android.view.accessibility.AccessibilityManager $r6;
        int $i0;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.MotionEvent;

        $r3 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipPopup mPopup>;

        if $r3 == null goto label1;

        $z0 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: boolean mFromTouch>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r4 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        $r6 = (android.view.accessibility.AccessibilityManager) $r5;

        $z0 = virtualinvoke $r6.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r6.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke $r2.<android.view.MotionEvent: int getAction()>();

        if $i0 == 7 goto label4;

        if $i0 == 10 goto label3;

        return 0;

     label3:
        specialinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: void clearAnchorPos()>();

        virtualinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: void hide()>();

        return 0;

     label4:
        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $z0 = virtualinvoke $r1.<android.view.View: boolean isEnabled()>();

        if $z0 == 0 goto label5;

        $r3 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipPopup mPopup>;

        if $r3 != null goto label5;

        $z0 = specialinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: boolean updateAnchorPos(android.view.MotionEvent)>($r2);

        if $z0 == 0 goto label5;

        staticinvoke <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>($r0);

     label5:
        return 0;
    }

    public boolean onLongClick(android.view.View)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i0 = $i0 / 2;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorX> = $i0;

        $i0 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $i0 = $i0 / 2;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorY> = $i0;

        virtualinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: void show(boolean)>(1);

        return 1;
    }

    public void onViewAttachedToWindow(android.view.View)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.View $r1;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 := @parameter0: android.view.View;

        return;
    }

    public void onViewDetachedFromWindow(android.view.View)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0;
        android.view.View $r1;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $r1 := @parameter0: android.view.View;

        virtualinvoke $r0.<androidx.appcompat.widget.TooltipCompatHandler: void hide()>();

        return;
    }

    void show(boolean)
    {
        androidx.appcompat.widget.TooltipCompatHandler $r0, $r3;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.CharSequence $r1;
        android.view.View $r2;
        androidx.appcompat.widget.TooltipPopup $r4;
        android.content.Context $r5;
        long $l2;
        java.lang.Runnable $r6;

        $r0 := @this: androidx.appcompat.widget.TooltipCompatHandler;

        $z0 := @parameter0: boolean;

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $z1 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r2);

        if $z1 != 0 goto label1;

        return;

     label1:
        staticinvoke <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>(null);

        $r3 = <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sActiveHandler>;

        if $r3 == null goto label2;

        virtualinvoke $r3.<androidx.appcompat.widget.TooltipCompatHandler: void hide()>();

     label2:
        <androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipCompatHandler sActiveHandler> = $r0;

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: boolean mFromTouch> = $z0;

        $r4 = new androidx.appcompat.widget.TooltipPopup;

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r5 = virtualinvoke $r2.<android.view.View: android.content.Context getContext()>();

        specialinvoke $r4.<androidx.appcompat.widget.TooltipPopup: void <init>(android.content.Context)>($r5);

        $r0.<androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipPopup mPopup> = $r4;

        $r4 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: androidx.appcompat.widget.TooltipPopup mPopup>;

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $i0 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorX>;

        $i1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: int mAnchorY>;

        $z0 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: boolean mFromTouch>;

        $r1 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.CharSequence mTooltipText>;

        virtualinvoke $r4.<androidx.appcompat.widget.TooltipPopup: void show(android.view.View,int,int,boolean,java.lang.CharSequence)>($r2, $i0, $i1, $z0, $r1);

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        virtualinvoke $r2.<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r0);

        $z0 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: boolean mFromTouch>;

        if $z0 == 0 goto label3;

        $l2 = 2500L;

        goto label5;

     label3:
        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $i0 = staticinvoke <androidx.core.view.ViewCompat: int getWindowSystemUiVisibility(android.view.View)>($r2);

        $i0 = $i0 & 1;

        if $i0 != 1 goto label4;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l2 = (long) $i0;

        $l2 = 3000L - $l2;

        goto label5;

     label4:
        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l2 = (long) $i0;

        $l2 = 15000L - $l2;

     label5:
        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r6 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.Runnable mHideRunnable>;

        virtualinvoke $r2.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r6);

        $r2 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: android.view.View mAnchor>;

        $r6 = $r0.<androidx.appcompat.widget.TooltipCompatHandler: java.lang.Runnable mHideRunnable>;

        virtualinvoke $r2.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r6, $l2);

        return;
    }

    public static void <clinit>()
    {
        <androidx.appcompat.widget.TooltipCompatHandler: java.lang.String TAG> = "TooltipCompatHandler";

        <androidx.appcompat.widget.TooltipCompatHandler: long LONG_CLICK_HIDE_TIMEOUT_MS> = 2500L;

        <androidx.appcompat.widget.TooltipCompatHandler: long HOVER_HIDE_TIMEOUT_SHORT_MS> = 3000L;

        <androidx.appcompat.widget.TooltipCompatHandler: long HOVER_HIDE_TIMEOUT_MS> = 15000L;

        return;
    }
}
