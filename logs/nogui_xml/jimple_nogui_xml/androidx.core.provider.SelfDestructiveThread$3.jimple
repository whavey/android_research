class androidx.core.provider.SelfDestructiveThread$3 extends java.lang.Object implements java.lang.Runnable
{
    final androidx.core.provider.SelfDestructiveThread this$0;
    final java.util.concurrent.Callable val$callable;
    final java.util.concurrent.locks.Condition val$cond;
    final java.util.concurrent.atomic.AtomicReference val$holder;
    final java.util.concurrent.locks.ReentrantLock val$lock;
    final java.util.concurrent.atomic.AtomicBoolean val$running;

    void <init>(androidx.core.provider.SelfDestructiveThread, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Callable, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.locks.Condition)
    {
        androidx.core.provider.SelfDestructiveThread$3 $r0;
        androidx.core.provider.SelfDestructiveThread $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.locks.ReentrantLock $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        java.util.concurrent.locks.Condition $r6;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread$3;

        $r1 := @parameter0: androidx.core.provider.SelfDestructiveThread;

        $r2 := @parameter1: java.util.concurrent.atomic.AtomicReference;

        $r3 := @parameter2: java.util.concurrent.Callable;

        $r4 := @parameter3: java.util.concurrent.locks.ReentrantLock;

        $r5 := @parameter4: java.util.concurrent.atomic.AtomicBoolean;

        $r6 := @parameter5: java.util.concurrent.locks.Condition;

        $r0.<androidx.core.provider.SelfDestructiveThread$3: androidx.core.provider.SelfDestructiveThread this$0> = $r1;

        $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicReference val$holder> = $r2;

        $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.Callable val$callable> = $r3;

        $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock> = $r4;

        $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicBoolean val$running> = $r5;

        $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.Condition val$cond> = $r6;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.core.provider.SelfDestructiveThread$3 $r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.concurrent.Callable $r3;
        java.lang.Exception $r4;
        java.util.concurrent.locks.ReentrantLock $r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        java.util.concurrent.locks.Condition $r7;
        java.lang.Throwable $r8;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread$3;

     label1:
        $r2 = $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicReference val$holder>;

        $r3 = $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.Callable val$callable>;

        $r1 = interfaceinvoke $r3.<java.util.concurrent.Callable: java.lang.Object call()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label5:
        $r6 = $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicBoolean val$running>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r7 = $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.Condition val$cond>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void signal()>();

     label6:
        $r5 = $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label7:
        $r8 := @caughtexception;

        $r5 = $r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
}
