class androidx.versionedparcelable.VersionedParcel$1 extends java.io.ObjectInputStream
{
    final androidx.versionedparcelable.VersionedParcel this$0;

    void <init>(androidx.versionedparcelable.VersionedParcel, java.io.InputStream)
    {
        androidx.versionedparcelable.VersionedParcel$1 $r0;
        androidx.versionedparcelable.VersionedParcel $r1;
        java.io.InputStream $r2;

        $r0 := @this: androidx.versionedparcelable.VersionedParcel$1;

        $r1 := @parameter0: androidx.versionedparcelable.VersionedParcel;

        $r2 := @parameter1: java.io.InputStream;

        $r0.<androidx.versionedparcelable.VersionedParcel$1: androidx.versionedparcelable.VersionedParcel this$0> = $r1;

        specialinvoke $r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r2);

        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        androidx.versionedparcelable.VersionedParcel$1 $r0;
        java.io.ObjectStreamClass $r1;
        java.lang.String $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;

        $r0 := @this: androidx.versionedparcelable.VersionedParcel$1;

        $r1 := @parameter0: java.io.ObjectStreamClass;

        $r2 = virtualinvoke $r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r2, 0, $r4);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r3 = specialinvoke $r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>($r1);

        return $r3;
    }
}
