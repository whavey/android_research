public abstract class androidx.lifecycle.LiveData extends java.lang.Object
{
    static final java.lang.Object NOT_SET;
    static final int START_VERSION;
    int mActiveCount;
    private volatile java.lang.Object mData;
    final java.lang.Object mDataLock;
    private boolean mDispatchInvalidated;
    private boolean mDispatchingValue;
    private androidx.arch.core.internal.SafeIterableMap mObservers;
    volatile java.lang.Object mPendingData;
    private final java.lang.Runnable mPostValueRunnable;
    private int mVersion;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <androidx.lifecycle.LiveData: int START_VERSION> = -1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.lifecycle.LiveData: java.lang.Object NOT_SET> = $r0;

        return;
    }

    public void <init>()
    {
        androidx.lifecycle.LiveData $r0;
        java.lang.Object $r1;
        androidx.arch.core.internal.SafeIterableMap $r2;
        androidx.lifecycle.LiveData$1 $r3;

        $r0 := @this: androidx.lifecycle.LiveData;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<androidx.lifecycle.LiveData: java.lang.Object mDataLock> = $r1;

        $r2 = new androidx.arch.core.internal.SafeIterableMap;

        specialinvoke $r2.<androidx.arch.core.internal.SafeIterableMap: void <init>()>();

        $r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers> = $r2;

        $r0.<androidx.lifecycle.LiveData: int mActiveCount> = 0;

        $r1 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        $r0.<androidx.lifecycle.LiveData: java.lang.Object mData> = $r1;

        $r0.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = $r1;

        $r0.<androidx.lifecycle.LiveData: int mVersion> = -1;

        $r3 = new androidx.lifecycle.LiveData$1;

        specialinvoke $r3.<androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>($r0);

        $r0.<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable> = $r3;

        return;
    }

    private static void assertMainThread(java.lang.String)
    {
        java.lang.String $r0;
        androidx.arch.core.executor.ArchTaskExecutor $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $z0 = virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot invoke ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setValue");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on a background");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thread");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }

    private void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)
    {
        androidx.lifecycle.LiveData $r0;
        androidx.lifecycle.LiveData$ObserverWrapper $r1;
        boolean $z0;
        int $i0, $i1;
        androidx.lifecycle.Observer $r2;
        java.lang.Object $r3;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: androidx.lifecycle.LiveData$ObserverWrapper;

        $z0 = $r1.<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r1.<androidx.lifecycle.LiveData$ObserverWrapper: boolean shouldBeActive()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r1.<androidx.lifecycle.LiveData$ObserverWrapper: void activeStateChanged(boolean)>(0);

        return;

     label2:
        $i0 = $r1.<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion>;

        $i1 = $r0.<androidx.lifecycle.LiveData: int mVersion>;

        if $i0 < $i1 goto label3;

        return;

     label3:
        $r1.<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion> = $i1;

        $r2 = $r1.<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.Observer mObserver>;

        $r3 = $r0.<androidx.lifecycle.LiveData: java.lang.Object mData>;

        interfaceinvoke $r2.<androidx.lifecycle.Observer: void onChanged(java.lang.Object)>($r3);

        return;
    }

    void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)
    {
        androidx.lifecycle.LiveData $r0;
        androidx.lifecycle.LiveData$ObserverWrapper $r1, $r6;
        boolean $z0;
        androidx.arch.core.internal.SafeIterableMap $r2;
        androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions $r3;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: androidx.lifecycle.LiveData$ObserverWrapper;

        $z0 = $r0.<androidx.lifecycle.LiveData: boolean mDispatchingValue>;

        if $z0 == 0 goto label1;

        $r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated> = 1;

        return;

     label1:
        $r0.<androidx.lifecycle.LiveData: boolean mDispatchingValue> = 1;

     label2:
        $r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated> = 0;

        if $r1 == null goto label3;

        specialinvoke $r0.<androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>($r1);

        $r1 = null;

        goto label5;

     label3:
        $r2 = $r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r3 = virtualinvoke $r2.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>();

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (androidx.lifecycle.LiveData$ObserverWrapper) $r4;

        specialinvoke $r0.<androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>($r6);

        $z0 = $r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated>;

        if $z0 == 0 goto label4;

     label5:
        $z0 = $r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated>;

        if $z0 != 0 goto label2;

        $r0.<androidx.lifecycle.LiveData: boolean mDispatchingValue> = 0;

        return;
    }

    public java.lang.Object getValue()
    {
        androidx.lifecycle.LiveData $r0;
        java.lang.Object $r1, $r2;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 = $r0.<androidx.lifecycle.LiveData: java.lang.Object mData>;

        $r2 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        if $r1 == $r2 goto label1;

        return $r1;

     label1:
        return null;
    }

    int getVersion()
    {
        androidx.lifecycle.LiveData $r0;
        int i0;

        $r0 := @this: androidx.lifecycle.LiveData;

        i0 = $r0.<androidx.lifecycle.LiveData: int mVersion>;

        return i0;
    }

    public boolean hasActiveObservers()
    {
        androidx.lifecycle.LiveData $r0;
        int $i0;

        $r0 := @this: androidx.lifecycle.LiveData;

        $i0 = $r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasObservers()
    {
        androidx.lifecycle.LiveData $r0;
        int $i0;
        androidx.arch.core.internal.SafeIterableMap $r1;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 = $r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $i0 = virtualinvoke $r1.<androidx.arch.core.internal.SafeIterableMap: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void observe(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData $r0;
        androidx.lifecycle.LifecycleOwner $r1;
        androidx.lifecycle.Observer $r2;
        androidx.lifecycle.Lifecycle $r3;
        androidx.lifecycle.Lifecycle$State $r4, $r5;
        androidx.lifecycle.LiveData$LifecycleBoundObserver $r6;
        androidx.arch.core.internal.SafeIterableMap $r7;
        java.lang.Object $r8;
        androidx.lifecycle.LiveData$ObserverWrapper $r9;
        boolean $z0;
        java.lang.IllegalArgumentException $r10;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r2 := @parameter1: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("observe");

        $r3 = interfaceinvoke $r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r4 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if $r4 != $r5 goto label1;

        return;

     label1:
        $r6 = new androidx.lifecycle.LiveData$LifecycleBoundObserver;

        specialinvoke $r6.<androidx.lifecycle.LiveData$LifecycleBoundObserver: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)>($r0, $r1, $r2);

        $r7 = $r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r8 = virtualinvoke $r7.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r2, $r6);

        $r9 = (androidx.lifecycle.LiveData$ObserverWrapper) $r8;

        if $r9 == null goto label3;

        $z0 = virtualinvoke $r9.<androidx.lifecycle.LiveData$ObserverWrapper: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)>($r1);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add the same observer with different lifecycles");

        throw $r10;

     label3:
        if $r9 == null goto label4;

        return;

     label4:
        $r3 = interfaceinvoke $r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        virtualinvoke $r3.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r6);

        return;
    }

    public void observeForever(androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData $r0;
        androidx.lifecycle.Observer $r1;
        java.lang.Object $r2;
        androidx.lifecycle.LiveData$AlwaysActiveObserver $r3;
        androidx.arch.core.internal.SafeIterableMap $r4;
        androidx.lifecycle.LiveData$ObserverWrapper $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("observeForever");

        $r3 = new androidx.lifecycle.LiveData$AlwaysActiveObserver;

        specialinvoke $r3.<androidx.lifecycle.LiveData$AlwaysActiveObserver: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.Observer)>($r0, $r1);

        $r4 = $r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r2 = virtualinvoke $r4.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r3);

        $r5 = (androidx.lifecycle.LiveData$ObserverWrapper) $r2;

        if $r5 == null goto label2;

        $z0 = $r5 instanceof androidx.lifecycle.LiveData$LifecycleBoundObserver;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add the same observer with different lifecycles");

        throw $r6;

     label2:
        if $r5 == null goto label3;

        return;

     label3:
        virtualinvoke $r3.<androidx.lifecycle.LiveData$AlwaysActiveObserver: void activeStateChanged(boolean)>(1);

        return;
    }

    protected void onActive()
    {
        androidx.lifecycle.LiveData $r0;

        $r0 := @this: androidx.lifecycle.LiveData;

        return;
    }

    protected void onInactive()
    {
        androidx.lifecycle.LiveData $r0;

        $r0 := @this: androidx.lifecycle.LiveData;

        return;
    }

    protected void postValue(java.lang.Object)
    {
        androidx.lifecycle.LiveData $r0;
        java.lang.Object $r1, $r2, $r4, $r5;
        androidx.arch.core.executor.ArchTaskExecutor $r3;
        boolean $z0;
        java.lang.Runnable $r6;
        java.lang.Throwable $r7;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: java.lang.Object;

        $r4 = $r0.<androidx.lifecycle.LiveData: java.lang.Object mDataLock>;

        entermonitor $r4;

        $z0 = 0;

     label1:
        $r5 = $r0.<androidx.lifecycle.LiveData: java.lang.Object mPendingData>;

        $r2 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

     label2:
        if $r5 != $r2 goto label3;

        $z0 = 1;

     label3:
        $r0.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = $r1;

        exitmonitor $r4;

     label4:
        if $z0 != 0 goto label5;

        return;

     label5:
        $r3 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $r6 = $r0.<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable>;

        virtualinvoke $r3.<androidx.arch.core.executor.ArchTaskExecutor: void postToMainThread(java.lang.Runnable)>($r6);

        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor $r4;

     label8:
        throw $r7;

     label9:
        $r7 := @caughtexception;

        goto label7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public void removeObserver(androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData $r0;
        androidx.lifecycle.Observer $r1;
        java.lang.Object $r2;
        androidx.arch.core.internal.SafeIterableMap $r3;
        androidx.lifecycle.LiveData$ObserverWrapper $r4;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("removeObserver");

        $r3 = $r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r2 = virtualinvoke $r3.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = (androidx.lifecycle.LiveData$ObserverWrapper) $r2;

        if $r4 != null goto label1;

        return;

     label1:
        virtualinvoke $r4.<androidx.lifecycle.LiveData$ObserverWrapper: void detachObserver()>();

        virtualinvoke $r4.<androidx.lifecycle.LiveData$ObserverWrapper: void activeStateChanged(boolean)>(0);

        return;
    }

    public void removeObservers(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LiveData $r0;
        androidx.lifecycle.LifecycleOwner $r1;
        androidx.arch.core.internal.SafeIterableMap $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;
        androidx.lifecycle.LiveData$ObserverWrapper $r6;
        androidx.lifecycle.Observer $r7;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("removeObservers");

        $r2 = $r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r3 = virtualinvoke $r2.<androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (androidx.lifecycle.LiveData$ObserverWrapper) $r4;

        $z0 = virtualinvoke $r6.<androidx.lifecycle.LiveData$ObserverWrapper: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)>($r1);

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (androidx.lifecycle.Observer) $r4;

        virtualinvoke $r0.<androidx.lifecycle.LiveData: void removeObserver(androidx.lifecycle.Observer)>($r7);

        goto label1;

     label2:
        return;
    }

    protected void setValue(java.lang.Object)
    {
        androidx.lifecycle.LiveData $r0;
        java.lang.Object $r1;
        int $i0;

        $r0 := @this: androidx.lifecycle.LiveData;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("setValue");

        $i0 = $r0.<androidx.lifecycle.LiveData: int mVersion>;

        $i0 = $i0 + 1;

        $r0.<androidx.lifecycle.LiveData: int mVersion> = $i0;

        $r0.<androidx.lifecycle.LiveData: java.lang.Object mData> = $r1;

        virtualinvoke $r0.<androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)>(null);

        return;
    }
}
