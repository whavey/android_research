public class androidx.arch.core.executor.DefaultTaskExecutor extends androidx.arch.core.executor.TaskExecutor
{
    private final java.util.concurrent.ExecutorService mDiskIO;
    private final java.lang.Object mLock;
    private volatile android.os.Handler mMainHandler;

    public void <init>()
    {
        androidx.arch.core.executor.DefaultTaskExecutor $r0;
        java.util.concurrent.ExecutorService $r1;
        java.lang.Object $r2;
        androidx.arch.core.executor.DefaultTaskExecutor$1 $r3;

        $r0 := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        specialinvoke $r0.<androidx.arch.core.executor.TaskExecutor: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<androidx.arch.core.executor.DefaultTaskExecutor: java.lang.Object mLock> = $r2;

        $r3 = new androidx.arch.core.executor.DefaultTaskExecutor$1;

        specialinvoke $r3.<androidx.arch.core.executor.DefaultTaskExecutor$1: void <init>(androidx.arch.core.executor.DefaultTaskExecutor)>($r0);

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(2, $r3);

        $r0.<androidx.arch.core.executor.DefaultTaskExecutor: java.util.concurrent.ExecutorService mDiskIO> = $r1;

        return;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        androidx.arch.core.executor.DefaultTaskExecutor $r0;
        java.lang.Runnable $r1;
        java.util.concurrent.ExecutorService $r2;

        $r0 := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = $r0.<androidx.arch.core.executor.DefaultTaskExecutor: java.util.concurrent.ExecutorService mDiskIO>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1);

        return;
    }

    public boolean isMainThread()
    {
        androidx.arch.core.executor.DefaultTaskExecutor $r0;
        android.os.Looper $r1;
        java.lang.Thread $r2, $r3;

        $r0 := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = virtualinvoke $r1.<android.os.Looper: java.lang.Thread getThread()>();

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.arch.core.executor.DefaultTaskExecutor $r0;
        java.lang.Runnable $r1;
        android.os.Looper $r2;
        android.os.Handler $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        $r0 := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        $r3 = $r0.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler>;

        if $r3 != null goto label6;

        $r4 = $r0.<androidx.arch.core.executor.DefaultTaskExecutor: java.lang.Object mLock>;

        entermonitor $r4;

     label1:
        $r3 = $r0.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler>;

        if $r3 != null goto label2;

        $r3 = new android.os.Handler;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r2);

        $r0.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler> = $r3;

     label2:
        exitmonitor $r4;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r5;

     label6:
        $r3 = $r0.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
