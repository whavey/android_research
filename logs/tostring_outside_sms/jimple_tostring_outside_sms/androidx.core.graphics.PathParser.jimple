public class androidx.core.graphics.PathParser extends java.lang.Object
{
    private static final java.lang.String LOGTAG;

    private void <init>()
    {
        androidx.core.graphics.PathParser $r0;

        $r0 := @this: androidx.core.graphics.PathParser;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void addNode(java.util.ArrayList, char, float[])
    {
        java.util.ArrayList $r0;
        char $c0;
        float[] $r1;
        androidx.core.graphics.PathParser$PathDataNode $r2;

        $r0 := @parameter0: java.util.ArrayList;

        $c0 := @parameter1: char;

        $r1 := @parameter2: float[];

        $r2 = new androidx.core.graphics.PathParser$PathDataNode;

        specialinvoke $r2.<androidx.core.graphics.PathParser$PathDataNode: void <init>(char,float[])>($c0, $r1);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    public static boolean canMorph(androidx.core.graphics.PathParser$PathDataNode[], androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode[] $r0, $r1;
        int $i0, $i1, $i4;
        androidx.core.graphics.PathParser$PathDataNode $r2;
        char $c2, $c3;
        float[] $r3;

        $r0 := @parameter0: androidx.core.graphics.PathParser$PathDataNode[];

        $r1 := @parameter1: androidx.core.graphics.PathParser$PathDataNode[];

        if $r0 == null goto label7;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $i0 = 0;

     label3:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label6;

        $r2 = $r0[$i0];

        $c2 = $r2.<androidx.core.graphics.PathParser$PathDataNode: char mType>;

        $r2 = $r1[$i0];

        $c3 = $r2.<androidx.core.graphics.PathParser$PathDataNode: char mType>;

        if $c2 != $c3 goto label5;

        $r2 = $r0[$i0];

        $r3 = $r2.<androidx.core.graphics.PathParser$PathDataNode: float[] mParams>;

        $i1 = lengthof $r3;

        $r2 = $r1[$i0];

        $r3 = $r2.<androidx.core.graphics.PathParser$PathDataNode: float[] mParams>;

        $i4 = lengthof $r3;

        if $i1 == $i4 goto label4;

        return 0;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        return 0;

     label6:
        return 1;

     label7:
        return 0;
    }

    static float[] copyOfRange(float[], int, int)
    {
        float[] $r0, $r1;
        int $i0, $i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if 0 > $i1 goto label2;

        $i2 = lengthof $r0;

        if 0 > $i2 goto label1;

        $i1 = $i1 - 0;

        $i2 = $i2 - 0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r1 = newarray (float)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i2);

        return $r1;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    public static androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2;
        float[] $r3;
        char $c3;
        androidx.core.graphics.PathParser$PathDataNode[] $r4;
        java.lang.Object[] $r5;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = 0;

        $i1 = 1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

     label2:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label4;

        $i1 = staticinvoke <androidx.core.graphics.PathParser: int nextStart(java.lang.String,int)>($r0, $i1);

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r3 = staticinvoke <androidx.core.graphics.PathParser: float[] getFloats(java.lang.String)>($r2);

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        staticinvoke <androidx.core.graphics.PathParser: void addNode(java.util.ArrayList,char,float[])>($r1, $c3, $r3);

     label3:
        $i0 = $i1;

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $i1 = $i1 - $i0;

        if $i1 != 1 goto label5;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label5;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $r3 = newarray (float)[0];

        staticinvoke <androidx.core.graphics.PathParser: void addNode(java.util.ArrayList,char,float[])>($r1, $c3, $r3);

     label5:
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r4 = newarray (androidx.core.graphics.PathParser$PathDataNode)[$i0];

        $r5 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (androidx.core.graphics.PathParser$PathDataNode[]) $r5;

        return $r4;
    }

    public static android.graphics.Path createPathFromPathData(java.lang.String)
    {
        java.lang.String $r0;
        android.graphics.Path $r1;
        java.lang.RuntimeException $r2, $r4;
        androidx.core.graphics.PathParser$PathDataNode[] $r3;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 = new android.graphics.Path;

        specialinvoke $r1.<android.graphics.Path: void <init>()>();

        $r3 = staticinvoke <androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>($r0);

        if $r3 == null goto label4;

     label1:
        staticinvoke <androidx.core.graphics.PathParser$PathDataNode: void nodesToPath(androidx.core.graphics.PathParser$PathDataNode[],android.graphics.Path)>($r3, $r1);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in parsing ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r4);

        throw $r2;

     label4:
        return null;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static androidx.core.graphics.PathParser$PathDataNode[] deepCopyNodes(androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode[] $r0, $r2;
        androidx.core.graphics.PathParser$PathDataNode $r1, $r3;
        int $i0, $i1;

        $r0 := @parameter0: androidx.core.graphics.PathParser$PathDataNode[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        $r2 = newarray (androidx.core.graphics.PathParser$PathDataNode)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r3 = new androidx.core.graphics.PathParser$PathDataNode;

        $r1 = $r0[$i0];

        specialinvoke $r3.<androidx.core.graphics.PathParser$PathDataNode: void <init>(androidx.core.graphics.PathParser$PathDataNode)>($r1);

        $r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return $r2;
    }

    private static void extract(java.lang.String, int, androidx.core.graphics.PathParser$ExtractFloatResult)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        androidx.core.graphics.PathParser$ExtractFloatResult $r1;
        boolean $z0, $z1, $z2, $z3;
        char $c3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: androidx.core.graphics.PathParser$ExtractFloatResult;

        $i1 = $i0;

        $z0 = 0;

        $r1.<androidx.core.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot> = 0;

        $z1 = 0;

        $z2 = 0;

     label01:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label10;

        $z3 = $z2;

        $z2 = 0;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c3 == 32 goto label07;

        if $c3 == 69 goto label06;

        if $c3 == 101 goto label06;

        lookupswitch($c3)
        {
            case 44: goto label07;
            case 45: goto label05;
            case 46: goto label03;
            default: goto label02;
        };

     label02:
        goto label08;

     label03:
        if $z1 != 0 goto label04;

        $z1 = 1;

        goto label08;

     label04:
        $z0 = 1;

        $r1.<androidx.core.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot> = 1;

        goto label08;

     label05:
        if $i1 == $i0 goto label08;

        if $z3 != 0 goto label08;

        $z0 = 1;

        $r1.<androidx.core.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot> = 1;

        goto label08;

     label06:
        $z2 = 1;

        goto label08;

     label07:
        $z0 = 1;

     label08:
        if $z0 == 0 goto label09;

        goto label10;

     label09:
        $i1 = $i1 + 1;

        goto label01;

     label10:
        $r1.<androidx.core.graphics.PathParser$ExtractFloatResult: int mEndPosition> = $i1;

        return;
    }

    private static float[] getFloats(java.lang.String)
    {
        java.lang.String $r0, $r3;
        androidx.core.graphics.PathParser$ExtractFloatResult $r1;
        char $c0;
        int $i1, $i2, $i3, $i4;
        float[] $r2;
        float $f0;
        boolean $z0;
        java.lang.Throwable $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c0 == 122 goto label14;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c0 != 90 goto label01;

        goto label14;

     label01:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

     label02:
        $r2 = newarray (float)[$i1];

        $i1 = 0;

        $i2 = 1;

        $r1 = new androidx.core.graphics.PathParser$ExtractFloatResult;

     label03:
        specialinvoke $r1.<androidx.core.graphics.PathParser$ExtractFloatResult: void <init>()>();

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

     label04:
        if $i2 >= $i3 goto label11;

     label05:
        staticinvoke <androidx.core.graphics.PathParser: void extract(java.lang.String,int,androidx.core.graphics.PathParser$ExtractFloatResult)>($r0, $i2, $r1);

     label06:
        $i4 = $r1.<androidx.core.graphics.PathParser$ExtractFloatResult: int mEndPosition>;

        if $i2 >= $i4 goto label09;

     label07:
        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i4);

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r3);

     label08:
        $r2[$i1] = $f0;

        $i1 = $i1 + 1;

     label09:
        $z0 = $r1.<androidx.core.graphics.PathParser$ExtractFloatResult: boolean mEndWithNegOrDot>;

        if $z0 == 0 goto label10;

        $i2 = $i4;

        goto label04;

     label10:
        $i2 = $i4 + 1;

        goto label04;

     label11:
        $r2 = staticinvoke <androidx.core.graphics.PathParser: float[] copyOfRange(float[],int,int)>($r2, 0, $i1);

     label12:
        return $r2;

     label13:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error in parsing \"");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r4);

        throw $r5;

     label14:
        $r2 = newarray (float)[0];

        return $r2;

        catch java.lang.NumberFormatException from label01 to label02 with label13;
        catch java.lang.NumberFormatException from label03 to label04 with label13;
        catch java.lang.NumberFormatException from label05 to label06 with label13;
        catch java.lang.NumberFormatException from label07 to label08 with label13;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    private static int nextStart(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i3;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i1 = $c2 + -65;

        $i3 = $c2 + -90;

        $i1 = $i1 * $i3;

        if $i1 <= 0 goto label2;

        $i1 = $c2 + -97;

        $i3 = $c2 + -122;

        $i1 = $i1 * $i3;

        if $i1 > 0 goto label3;

     label2:
        if $c2 == 101 goto label3;

        if $c2 == 69 goto label3;

        return $i0;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $i0;
    }

    public static void updateNodes(androidx.core.graphics.PathParser$PathDataNode[], androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode[] $r0, $r1;
        int $i0, $i1, $i3;
        androidx.core.graphics.PathParser$PathDataNode $r2, $r3;
        char $c2;
        float[] $r4, $r5;
        float $f0;

        $r0 := @parameter0: androidx.core.graphics.PathParser$PathDataNode[];

        $r1 := @parameter1: androidx.core.graphics.PathParser$PathDataNode[];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r2 = $r0[$i0];

        $r3 = $r1[$i0];

        $c2 = $r3.<androidx.core.graphics.PathParser$PathDataNode: char mType>;

        $r2.<androidx.core.graphics.PathParser$PathDataNode: char mType> = $c2;

        $i1 = 0;

     label2:
        $r2 = $r1[$i0];

        $r4 = $r2.<androidx.core.graphics.PathParser$PathDataNode: float[] mParams>;

        $i3 = lengthof $r4;

        if $i1 >= $i3 goto label3;

        $r2 = $r0[$i0];

        $r4 = $r2.<androidx.core.graphics.PathParser$PathDataNode: float[] mParams>;

        $r2 = $r1[$i0];

        $r5 = $r2.<androidx.core.graphics.PathParser$PathDataNode: float[] mParams>;

        $f0 = $r5[$i1];

        $r4[$i1] = $f0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <androidx.core.graphics.PathParser: java.lang.String LOGTAG> = "PathParser";

        return;
    }
}
