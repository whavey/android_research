public class androidx.appcompat.graphics.drawable.DrawableWrapper extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback
{
    private android.graphics.drawable.Drawable mDrawable;

    public void <init>(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke $r0.<android.graphics.drawable.Drawable: void <init>()>();

        virtualinvoke $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: void setWrappedDrawable(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.Canvas $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        return;
    }

    public int getChangingConfigurations()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        return $i0;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $r1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>();

        return $r1;
    }

    public int getIntrinsicHeight()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        return $i0;
    }

    public int getMinimumHeight()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        return $i0;
    }

    public int getMinimumWidth()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        return $i0;
    }

    public int getOpacity()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        return $i0;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.Rect $r1;
        boolean $z0;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>($r1);

        return $z0;
    }

    public int[] getState()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int[] $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $r1 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int[] getState()>();

        return $r1;
    }

    public android.graphics.Region getTransparentRegion()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.Region $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $r1 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>();

        return $r1;
    }

    public android.graphics.drawable.Drawable getWrappedDrawable()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        return r1;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: void invalidateSelf()>();

        return;
    }

    public boolean isAutoMirrored()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $z0 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: boolean isAutoMirrored(android.graphics.drawable.Drawable)>($r1);

        return $z0;
    }

    public boolean isStateful()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        return $z0;
    }

    public void jumpToCurrentState()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void jumpToCurrentState(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.Rect $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r1);

        return;
    }

    protected boolean onLevelChange(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>($i0);

        return $z0;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;
        long $l0;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 := @parameter1: java.lang.Runnable;

        $l0 := @parameter2: long;

        virtualinvoke $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: void scheduleSelf(java.lang.Runnable,long)>($r2, $l0);

        return;
    }

    public void setAlpha(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>($i0);

        return;
    }

    public void setAutoMirrored(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>($r1, $z0);

        return;
    }

    public void setChangingConfigurations(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>($i0);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.ColorFilter $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>($r1);

        return;
    }

    public void setDither(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setDither(boolean)>($z0);

        return;
    }

    public void setFilterBitmap(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>($z0);

        return;
    }

    public void setHotspot(float, float)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        float $f0, $f1;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setHotspot(android.graphics.drawable.Drawable,float,float)>($r1, $f0, $f1);

        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)>($r1, $i0, $i1, $i2, $i3);

        return;
    }

    public boolean setState(int[])
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int[] $r1;
        boolean $z0;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: int[];

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setState(int[])>($r1);

        return $z0;
    }

    public void setTint(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTint(android.graphics.drawable.Drawable,int)>($r1, $i0);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.content.res.ColorStateList $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r2, $r1);

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.PorterDuff$Mode $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>($r2, $r1);

        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        boolean $z0, $z1, $z2;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z2 = specialinvoke $r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z0, $z1);

        if $z2 != 0 goto label2;

        $r1 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z0, $z1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public void setWrappedDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable $r1, $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label1:
        $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable> = $r1;

        if $r1 == null goto label2;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>($r0);

     label2:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper $r0;
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;

        $r0 := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 := @parameter1: java.lang.Runnable;

        virtualinvoke $r0.<androidx.appcompat.graphics.drawable.DrawableWrapper: void unscheduleSelf(java.lang.Runnable)>($r2);

        return;
    }
}
