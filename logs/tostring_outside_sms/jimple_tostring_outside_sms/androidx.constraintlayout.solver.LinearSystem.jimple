public class androidx.constraintlayout.solver.LinearSystem extends java.lang.Object
{
    private static final boolean DEBUG;
    public static final boolean FULL_DEBUG;
    private static int POOL_SIZE;
    public static androidx.constraintlayout.solver.Metrics sMetrics;
    private int TABLE_SIZE;
    public boolean graphOptimizer;
    private boolean[] mAlreadyTestedCandidates;
    final androidx.constraintlayout.solver.Cache mCache;
    private androidx.constraintlayout.solver.LinearSystem$Row mGoal;
    private int mMaxColumns;
    private int mMaxRows;
    int mNumColumns;
    int mNumRows;
    private androidx.constraintlayout.solver.SolverVariable[] mPoolVariables;
    private int mPoolVariablesCount;
    androidx.constraintlayout.solver.ArrayRow[] mRows;
    private final androidx.constraintlayout.solver.LinearSystem$Row mTempGoal;
    private java.util.HashMap mVariables;
    int mVariablesID;
    private androidx.constraintlayout.solver.ArrayRow[] tempClientsCopy;

    static void <clinit>()
    {
        <androidx.constraintlayout.solver.LinearSystem: boolean FULL_DEBUG> = 0;

        <androidx.constraintlayout.solver.LinearSystem: boolean DEBUG> = 0;

        <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE> = 1000;

        return;
    }

    public void <init>()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i1;
        boolean[] $r1;
        androidx.constraintlayout.solver.SolverVariable[] $r2;
        androidx.constraintlayout.solver.ArrayRow[] $r3;
        androidx.constraintlayout.solver.Cache $r4;
        androidx.constraintlayout.solver.GoalRow $r5;
        androidx.constraintlayout.solver.ArrayRow $r6;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = 0;

        $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables> = null;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE> = 32;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns> = $i0;

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows> = null;

        $r0.<androidx.constraintlayout.solver.LinearSystem: boolean graphOptimizer> = 0;

        $r1 = newarray (boolean)[$i0];

        $r0.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates> = $r1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = 0;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows> = $i0;

        $i1 = <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE>;

        $r2 = newarray (androidx.constraintlayout.solver.SolverVariable)[$i1];

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables> = $r2;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount> = 0;

        $r3 = newarray (androidx.constraintlayout.solver.ArrayRow)[$i0];

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] tempClientsCopy> = $r3;

        $r3 = newarray (androidx.constraintlayout.solver.ArrayRow)[$i0];

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows> = $r3;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void releaseRows()>();

        $r4 = new androidx.constraintlayout.solver.Cache;

        specialinvoke $r4.<androidx.constraintlayout.solver.Cache: void <init>()>();

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache> = $r4;

        $r5 = new androidx.constraintlayout.solver.GoalRow;

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $r5.<androidx.constraintlayout.solver.GoalRow: void <init>(androidx.constraintlayout.solver.Cache)>($r4);

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal> = $r5;

        $r6 = new androidx.constraintlayout.solver.ArrayRow;

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $r6.<androidx.constraintlayout.solver.ArrayRow: void <init>(androidx.constraintlayout.solver.Cache)>($r4);

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal> = $r6;

        return;
    }

    private androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type, java.lang.String)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable$Type $r1;
        java.lang.String $r2;
        int $i0, $i1;
        androidx.constraintlayout.solver.Cache $r3;
        androidx.constraintlayout.solver.Pools$Pool $r4;
        java.lang.Object $r5;
        androidx.constraintlayout.solver.SolverVariable $r6, $r7;
        androidx.constraintlayout.solver.SolverVariable[] $r8;
        java.lang.Object[] $r9;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable$Type;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r4 = $r3.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool solverVariablePool>;

        $r5 = interfaceinvoke $r4.<androidx.constraintlayout.solver.Pools$Pool: java.lang.Object acquire()>();

        $r6 = (androidx.constraintlayout.solver.SolverVariable) $r5;

        if $r6 != null goto label1;

        $r7 = new androidx.constraintlayout.solver.SolverVariable;

        specialinvoke $r7.<androidx.constraintlayout.solver.SolverVariable: void <init>(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($r1, $r2);

        $r6 = $r7;

        virtualinvoke $r7.<androidx.constraintlayout.solver.SolverVariable: void setType(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($r1, $r2);

        goto label2;

     label1:
        virtualinvoke $r6.<androidx.constraintlayout.solver.SolverVariable: void reset()>();

        virtualinvoke $r6.<androidx.constraintlayout.solver.SolverVariable: void setType(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($r1, $r2);

     label2:
        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount>;

        $i1 = <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE>;

        if $i0 < $i1 goto label3;

        $i0 = $i1 * 2;

        <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE> = $i0;

        $r8 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables>;

        $i0 = <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE>;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, $i0);

        $r8 = (androidx.constraintlayout.solver.SolverVariable[]) $r9;

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables> = $r8;

     label3:
        $r8 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables>;

        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount>;

        $i0 = $i1 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount> = $i0;

        $r8[$i1] = $r6;

        return $r6;
    }

    private void addError(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>($r0, 0);

        return;
    }

    private final void addRow(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1, $r3;
        int $i0;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.Cache $r4;
        androidx.constraintlayout.solver.Pools$Pool $r5;
        androidx.constraintlayout.solver.SolverVariable $r6;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $r3 = $r2[$i0];

        if $r3 == null goto label1;

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool arrayRowPool>;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $r3 = $r2[$i0];

        interfaceinvoke $r5.<androidx.constraintlayout.solver.Pools$Pool: boolean release(java.lang.Object)>($r3);

     label1:
        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $r2[$i0] = $r1;

        $r6 = $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $r6.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = $i0;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = $i0;

        $r6 = $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke $r6.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>($r1);

        return;
    }

    private void addSingleError(androidx.constraintlayout.solver.ArrayRow, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1;
        int $i0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($r1, $i0, 0);

        return;
    }

    private void computeValues()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1;
        float $f0;
        int $i0, $i1;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.ArrayRow $r3;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 = 0;

     label1:
        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i0 >= $i1 goto label2;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i0];

        $r1 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $f0 = $r3.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        $r1.<androidx.constraintlayout.solver.SolverVariable: float computedValue> = $f0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static androidx.constraintlayout.solver.ArrayRow createRowCentering(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, float, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r3, $r4;
        int $i0, $i1;
        float $f0;
        boolean $z0;
        androidx.constraintlayout.solver.ArrayRow $r5;

        $r0 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter3: int;

        $f0 := @parameter4: float;

        $r3 := @parameter5: androidx.constraintlayout.solver.SolverVariable;

        $r4 := @parameter6: androidx.constraintlayout.solver.SolverVariable;

        $i1 := @parameter7: int;

        $z0 := @parameter8: boolean;

        $r5 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowCentering(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,float,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $i0, $f0, $r3, $r4, $i1);

        if $z0 == 0 goto label1;

        virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>($r0, 4);

     label1:
        return $r5;
    }

    public static androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, float, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r3;
        float $f0;
        boolean $z0;
        androidx.constraintlayout.solver.ArrayRow $r4;

        $r0 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $r3 := @parameter3: androidx.constraintlayout.solver.SolverVariable;

        $f0 := @parameter4: float;

        $z0 := @parameter5: boolean;

        $r4 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        if $z0 == 0 goto label1;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addError(androidx.constraintlayout.solver.ArrayRow)>($r4);

     label1:
        $r4 = virtualinvoke $r4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($r1, $r2, $r3, $f0);

        return $r4;
    }

    public static androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2;
        int $i0;
        boolean $z0;
        androidx.constraintlayout.solver.ArrayRow $r3;

        $r0 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $i0);

        if $z0 == 0 goto label1;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int)>($r3, 1);

     label1:
        return $r3;
    }

    public static androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r3;
        int $i0;
        boolean $z0;
        androidx.constraintlayout.solver.ArrayRow $r4;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r5;
        float $f0;

        $r0 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $r4 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $r3, $i0);

        if $z0 == 0 goto label1;

        $r5 = $r4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f0 = virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r3);

        $f0 = -1.0F * $f0;

        $i0 = (int) $f0;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int)>($r4, $i0);

     label1:
        return $r4;
    }

    public static androidx.constraintlayout.solver.ArrayRow createRowLowerThan(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r3;
        int $i0;
        boolean $z0;
        androidx.constraintlayout.solver.ArrayRow $r4;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r5;
        float $f0;

        $r0 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $r4 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $r3, $i0);

        if $z0 == 0 goto label1;

        $r5 = $r4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f0 = virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r3);

        $f0 = -1.0F * $f0;

        $i0 = (int) $f0;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int)>($r4, $i0);

     label1:
        return $r4;
    }

    private androidx.constraintlayout.solver.SolverVariable createVariable(java.lang.String, androidx.constraintlayout.solver.SolverVariable$Type)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.String $r1;
        androidx.constraintlayout.solver.SolverVariable$Type $r2;
        int $i0, $i2;
        androidx.constraintlayout.solver.SolverVariable $r3;
        androidx.constraintlayout.solver.Metrics $r4;
        long $l1;
        java.util.HashMap $r5;
        androidx.constraintlayout.solver.Cache $r6;
        androidx.constraintlayout.solver.SolverVariable[] $r7;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable$Type;

        $r4 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r4 == null goto label1;

        $l1 = $r4.<androidx.constraintlayout.solver.Metrics: long variables>;

        $l1 = $l1 + 1L;

        $r4.<androidx.constraintlayout.solver.Metrics: long variables> = $l1;

     label1:
        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if $i0 < $i2 goto label2;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        $r3 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($r2, null);

        virtualinvoke $r3.<androidx.constraintlayout.solver.SolverVariable: void setName(java.lang.String)>($r1);

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r3.<androidx.constraintlayout.solver.SolverVariable: int id> = $i0;

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        if $r5 != null goto label3;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables> = $r5;

     label3:
        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        $r6 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r7 = $r6.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r7[$i0] = $r3;

        return $r3;
    }

    private void displayRows()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        androidx.constraintlayout.solver.ArrayRow[] $r3;
        androidx.constraintlayout.solver.ArrayRow $r4;
        androidx.constraintlayout.solver.LinearSystem$Row $r5;
        java.io.PrintStream $r6;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void displaySolverVariables()>();

        $r1 = "";

        $i0 = 0;

     label1:
        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i0 >= $i1 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r4 = $r3[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;
    }

    private void displaySolverVariables()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        int $i0;
        java.io.PrintStream $r3;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Rows (");

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;
    }

    private int enforceBFS(androidx.constraintlayout.solver.LinearSystem$Row) throws java.lang.Exception
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.LinearSystem$Row $r1;
        byte $b0;
        float $f0, $f1, $f2;
        boolean $z0, $z1;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.ArrayRow $r3;
        androidx.constraintlayout.solver.SolverVariable $r4;
        androidx.constraintlayout.solver.SolverVariable$Type $r5, $r6;
        androidx.constraintlayout.solver.Metrics $r7;
        long $l3;
        androidx.constraintlayout.solver.Cache $r8;
        androidx.constraintlayout.solver.SolverVariable[] $r9;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r10;
        float[] $r11;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.LinearSystem$Row;

        $z0 = 0;

        $i1 = 0;

     label01:
        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i1 >= $i2 goto label04;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i1];

        $r4 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r5 = $r4.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        $r6 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if $r5 != $r6 goto label02;

        goto label03;

     label02:
        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i1];

        $f1 = $r3.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        $b0 = $f1 cmpg 0.0F;

        if $b0 >= 0 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $i1 = $i1 + 1;

        goto label01;

     label04:
        if $z0 == 0 goto label23;

        $z0 = 0;

        $i1 = 0;

     label05:
        if $z0 != 0 goto label24;

        $r7 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r7 == null goto label06;

        $l3 = $r7.<androidx.constraintlayout.solver.Metrics: long bfs>;

        $l3 = $l3 + 1L;

        $r7.<androidx.constraintlayout.solver.Metrics: long bfs> = $l3;

     label06:
        $i1 = $i1 + 1;

        $f1 = 3.4028235E38F;

        $i2 = 0;

        $i4 = -1;

        $i5 = -1;

        $i6 = 0;

     label07:
        $i7 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i6 >= $i7 goto label18;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i6];

        $r4 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r5 = $r4.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        $r6 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if $r5 != $r6 goto label08;

        goto label17;

     label08:
        $z1 = $r3.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z1 == 0 goto label09;

        goto label17;

     label09:
        $f0 = $r3.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label17;

        $i7 = 1;

     label10:
        $i8 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        if $i7 >= $i8 goto label17;

        $r8 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r9 = $r8.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $r4 = $r9[$i7];

        $r10 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f0 = virtualinvoke $r10.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $b0 = $f0 cmpg 0.0F;

        if $b0 > 0 goto label11;

        goto label16;

     label11:
        $i8 = 0;

     label12:
        if $i8 >= 7 goto label16;

        $r11 = $r4.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        $f2 = $r11[$i8];

        $f2 = $f2 / $f0;

        $b0 = $f2 cmpg $f1;

        if $b0 >= 0 goto label13;

        if $i8 == $i2 goto label14;

     label13:
        if $i8 <= $i2 goto label15;

     label14:
        $f1 = $f2;

        $i4 = $i6;

        $i5 = $i7;

        $i2 = $i8;

     label15:
        $i8 = $i8 + 1;

        goto label12;

     label16:
        $i7 = $i7 + 1;

        goto label10;

     label17:
        $i6 = $i6 + 1;

        goto label07;

     label18:
        if $i4 == -1 goto label20;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i4];

        $r4 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r4.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        $r7 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r7 == null goto label19;

        $l3 = $r7.<androidx.constraintlayout.solver.Metrics: long pivots>;

        $l3 = $l3 + 1L;

        $r7.<androidx.constraintlayout.solver.Metrics: long pivots> = $l3;

     label19:
        $r8 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r9 = $r8.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $r4 = $r9[$i5];

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: void pivot(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $r4 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r4.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = $i4;

        $r4 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke $r4.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>($r3);

        goto label21;

     label20:
        $z0 = 1;

     label21:
        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i2 = $i2 / 2;

        if $i1 <= $i2 goto label22;

        $z0 = 1;

     label22:
        goto label05;

     label23:
        return 0;

     label24:
        return $i1;
    }

    private java.lang.String getDisplaySize(int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 := @parameter0: int;

        $i1 = $i0 * 4;

        $i1 = $i1 / 1024;

        $i1 = $i1 / 1024;

        if $i1 <= 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Mb");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label1:
        $i1 = $i0 * 4;

        $i1 = $i1 / 1024;

        if $i1 <= 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Kb");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i0 = $i0 * 4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private java.lang.String getDisplayStrength(int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 := @parameter0: int;

        if $i0 != 1 goto label1;

        return "LOW";

     label1:
        if $i0 != 2 goto label2;

        return "MEDIUM";

     label2:
        if $i0 != 3 goto label3;

        return "HIGH";

     label3:
        if $i0 != 4 goto label4;

        return "HIGHEST";

     label4:
        if $i0 != 5 goto label5;

        return "EQUALITY";

     label5:
        if $i0 != 6 goto label6;

        return "FIXED";

     label6:
        return "NONE";
    }

    public static androidx.constraintlayout.solver.Metrics getMetrics()
    {
        androidx.constraintlayout.solver.Metrics r0;

        r0 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        return r0;
    }

    private void increaseTableSize()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0;
        androidx.constraintlayout.solver.ArrayRow[] $r1;
        java.lang.Object[] $r2;
        androidx.constraintlayout.solver.Cache $r3;
        androidx.constraintlayout.solver.SolverVariable[] $r4;
        boolean[] $r5;
        androidx.constraintlayout.solver.Metrics $r6;
        long $l1, $l2;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $i0 = $i0 * 2;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE> = $i0;

        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (androidx.constraintlayout.solver.ArrayRow[]) $r2;

        $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows> = $r1;

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r4 = $r3.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0);

        $r4 = (androidx.constraintlayout.solver.SolverVariable[]) $r2;

        $r3.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables> = $r4;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $r5 = newarray (boolean)[$i0];

        $r0.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates> = $r5;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns> = $i0;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows> = $i0;

        $r6 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r6 == null goto label1;

        $l1 = $r6.<androidx.constraintlayout.solver.Metrics: long tableSizeIncrease>;

        $l1 = $l1 + 1L;

        $r6.<androidx.constraintlayout.solver.Metrics: long tableSizeIncrease> = $l1;

        $r6 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $l1 = $r6.<androidx.constraintlayout.solver.Metrics: long maxTableSize>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $l2 = (long) $i0;

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l2);

        $r6.<androidx.constraintlayout.solver.Metrics: long maxTableSize> = $l1;

        $r6 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $l1 = $r6.<androidx.constraintlayout.solver.Metrics: long maxTableSize>;

        $r6.<androidx.constraintlayout.solver.Metrics: long lastTableSize> = $l1;

     label1:
        return;
    }

    private final int optimize(androidx.constraintlayout.solver.LinearSystem$Row, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.LinearSystem$Row $r1;
        boolean $z0, $z1;
        byte $b0;
        androidx.constraintlayout.solver.Metrics $r2;
        long $l1;
        int $i2, $i3, $i4, $i5;
        boolean[] $r3;
        androidx.constraintlayout.solver.SolverVariable $r4, $r7;
        float $f0, $f1, $f2;
        androidx.constraintlayout.solver.ArrayRow[] $r5;
        androidx.constraintlayout.solver.ArrayRow $r6;
        androidx.constraintlayout.solver.SolverVariable$Type $r8, $r9;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r10;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.LinearSystem$Row;

        $z0 := @parameter1: boolean;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label01;

        $l1 = $r2.<androidx.constraintlayout.solver.Metrics: long optimize>;

        $l1 = $l1 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long optimize> = $l1;

     label01:
        $z0 = 0;

        $i2 = 0;

        $i3 = 0;

     label02:
        $i4 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        if $i3 >= $i4 goto label03;

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $r3[$i3] = 0;

        $i3 = $i3 + 1;

        goto label02;

     label03:
        if $z0 != 0 goto label18;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label04;

        $l1 = $r2.<androidx.constraintlayout.solver.Metrics: long iterations>;

        $l1 = $l1 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long iterations> = $l1;

     label04:
        $i2 = $i2 + 1;

        $i3 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i3 = $i3 * 2;

        if $i2 < $i3 goto label05;

        return $i2;

     label05:
        $r4 = interfaceinvoke $r1.<androidx.constraintlayout.solver.LinearSystem$Row: androidx.constraintlayout.solver.SolverVariable getKey()>();

        if $r4 == null goto label06;

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $r4 = interfaceinvoke $r1.<androidx.constraintlayout.solver.LinearSystem$Row: androidx.constraintlayout.solver.SolverVariable getKey()>();

        $i3 = $r4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $r3[$i3] = 1;

     label06:
        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $r4 = interfaceinvoke $r1.<androidx.constraintlayout.solver.LinearSystem$Row: androidx.constraintlayout.solver.SolverVariable getPivotCandidate(androidx.constraintlayout.solver.LinearSystem,boolean[])>($r0, $r3);

        if $r4 == null goto label08;

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $i3 = $r4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $z1 = $r3[$i3];

        if $z1 == 0 goto label07;

        return $i2;

     label07:
        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $i3 = $r4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $r3[$i3] = 1;

     label08:
        if $r4 == null goto label17;

        $f0 = 3.4028235E38F;

        $i3 = -1;

        $i4 = 0;

     label09:
        $i5 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i4 >= $i5 goto label13;

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r6 = $r5[$i4];

        $r7 = $r6.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r8 = $r7.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        $r9 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if $r8 != $r9 goto label10;

        goto label12;

     label10:
        $z1 = $r6.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z1 == 0 goto label11;

        goto label12;

     label11:
        $z1 = virtualinvoke $r6.<androidx.constraintlayout.solver.ArrayRow: boolean hasVariable(androidx.constraintlayout.solver.SolverVariable)>($r4);

        if $z1 == 0 goto label12;

        $r10 = $r6.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f1 = virtualinvoke $r10.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $b0 = $f1 cmpg 0.0F;

        if $b0 >= 0 goto label12;

        $f2 = $r6.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        $f2 = neg $f2;

        $f1 = $f2 / $f1;

        $b0 = $f1 cmpg $f0;

        if $b0 >= 0 goto label12;

        $f0 = $f1;

        $i3 = $i4;

     label12:
        $i4 = $i4 + 1;

        goto label09;

     label13:
        if $i3 <= -1 goto label15;

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r6 = $r5[$i3];

        $r7 = $r6.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r7.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label14;

        $l1 = $r2.<androidx.constraintlayout.solver.Metrics: long pivots>;

        $l1 = $l1 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long pivots> = $l1;

     label14:
        virtualinvoke $r6.<androidx.constraintlayout.solver.ArrayRow: void pivot(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $r4 = $r6.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r4.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = $i3;

        $r4 = $r6.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke $r4.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>($r6);

        goto label16;

     label15:
        $z0 = 1;

     label16:
        goto label03;

     label17:
        $z0 = 1;

        goto label03;

     label18:
        return $i2;
    }

    private void releaseRows()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i1;
        androidx.constraintlayout.solver.ArrayRow[] $r1;
        androidx.constraintlayout.solver.ArrayRow $r2;
        androidx.constraintlayout.solver.Cache $r3;
        androidx.constraintlayout.solver.Pools$Pool $r4;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 = 0;

     label1:
        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r2 = $r1[$i0];

        if $r2 == null goto label2;

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r4 = $r3.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool arrayRowPool>;

        interfaceinvoke $r4.<androidx.constraintlayout.solver.Pools$Pool: boolean release(java.lang.Object)>($r2);

     label2:
        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r1[$i0] = null;

        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }

    private final void updateRowFromVariables(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        int $i0;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r3;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i0 <= 0 goto label1;

        $r3 = $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayLinkedVariables: void updateFromSystem(androidx.constraintlayout.solver.ArrayRow,androidx.constraintlayout.solver.ArrayRow[])>($r1, $r2);

        $r3 = $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $i0 = $r3.<androidx.constraintlayout.solver.ArrayLinkedVariables: int currentSize>;

        if $i0 != 0 goto label1;

        $r1.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition> = 1;

     label1:
        return;
    }

    public void addCenterPoint(androidx.constraintlayout.solver.widgets.ConstraintWidget, androidx.constraintlayout.solver.widgets.ConstraintWidget, float, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.widgets.ConstraintWidget $r1, $r2;
        float $f0, $f1;
        int $i0;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type $r3;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $r4;
        androidx.constraintlayout.solver.SolverVariable $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        androidx.constraintlayout.solver.ArrayRow $r13;
        double $d0, $d1;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.widgets.ConstraintWidget;

        $r2 := @parameter1: androidx.constraintlayout.solver.widgets.ConstraintWidget;

        $f0 := @parameter2: float;

        $i0 := @parameter3: int;

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type LEFT>;

        $r4 = virtualinvoke $r1.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r5 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type TOP>;

        $r4 = virtualinvoke $r1.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r6 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type RIGHT>;

        $r4 = virtualinvoke $r1.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r7 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type BOTTOM>;

        $r4 = virtualinvoke $r1.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r8 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type LEFT>;

        $r4 = virtualinvoke $r2.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r9 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type TOP>;

        $r4 = virtualinvoke $r2.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r10 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type RIGHT>;

        $r4 = virtualinvoke $r2.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r11 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r3 = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type BOTTOM>;

        $r4 = virtualinvoke $r2.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>($r3);

        $r12 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($r4);

        $r13 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $d1 = (double) $i0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 * $d1;

        $f1 = (float) $d0;

        virtualinvoke $r13.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowWithAngle(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($r6, $r8, $r10, $r12, $f1);

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r13);

        $r13 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $d1 = (double) $i0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 * $d1;

        $f0 = (float) $d0;

        virtualinvoke $r13.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowWithAngle(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($r5, $r7, $r9, $r11, $f0);

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r13);

        return;
    }

    public void addCentering(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, float, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;
        float $f0;
        androidx.constraintlayout.solver.ArrayRow $r5;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter2: int;

        $f0 := @parameter3: float;

        $r3 := @parameter4: androidx.constraintlayout.solver.SolverVariable;

        $r4 := @parameter5: androidx.constraintlayout.solver.SolverVariable;

        $i1 := @parameter6: int;

        $i2 := @parameter7: int;

        $r5 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowCentering(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,float,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $i0, $f0, $r3, $r4, $i1);

        if $i2 == 6 goto label1;

        virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>($r0, $i2);

     label1:
        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r5);

        return;
    }

    public void addConstraint(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1;
        androidx.constraintlayout.solver.Metrics $r2;
        long $l0;
        boolean $z0, $z1;
        int $i1, $i2;
        androidx.constraintlayout.solver.SolverVariable $r3, $r5;
        androidx.constraintlayout.solver.LinearSystem$Row $r4;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label02;

        $l0 = $r2.<androidx.constraintlayout.solver.Metrics: long constraints>;

        $l0 = $l0 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long constraints> = $l0;

        $z0 = $r1.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z0 == 0 goto label02;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $l0 = $r2.<androidx.constraintlayout.solver.Metrics: long simpleconstraints>;

        $l0 = $l0 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long simpleconstraints> = $l0;

     label02:
        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $i1 = $i1 + 1;

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows>;

        if $i1 >= $i2 goto label03;

        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i1 = $i1 + 1;

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if $i1 < $i2 goto label04;

     label03:
        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label04:
        $z0 = 0;

        $z1 = $r1.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z1 != 0 goto label10;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void updateRowFromVariables(androidx.constraintlayout.solver.ArrayRow)>($r1);

        $z1 = virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: boolean isEmpty()>();

        if $z1 == 0 goto label05;

        return;

     label05:
        virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: void ensurePositiveConstant()>();

        $z1 = virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: boolean chooseSubject(androidx.constraintlayout.solver.LinearSystem)>($r0);

        if $z1 == 0 goto label09;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createExtraVariable()>();

        $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable> = $r3;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addRow(androidx.constraintlayout.solver.ArrayRow)>($r1);

        $z0 = 1;

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal>;

        interfaceinvoke $r4.<androidx.constraintlayout.solver.LinearSystem$Row: void initFromRow(androidx.constraintlayout.solver.LinearSystem$Row)>($r1);

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal>;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: int optimize(androidx.constraintlayout.solver.LinearSystem$Row,boolean)>($r4, 1);

        $i1 = $r3.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if $i1 != -1 goto label09;

        $r5 = $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        if $r5 != $r3 goto label07;

        $r3 = virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable pickPivot(androidx.constraintlayout.solver.SolverVariable)>($r3);

        if $r3 == null goto label07;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label06;

        $l0 = $r2.<androidx.constraintlayout.solver.Metrics: long pivots>;

        $l0 = $l0 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long pivots> = $l0;

     label06:
        virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: void pivot(androidx.constraintlayout.solver.SolverVariable)>($r3);

     label07:
        $z1 = $r1.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z1 != 0 goto label08;

        $r3 = $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke $r3.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>($r1);

     label08:
        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $i1 = $i1 - 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = $i1;

     label09:
        $z1 = virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: boolean hasKeyVariable()>();

        if $z1 != 0 goto label10;

        return;

     label10:
        if $z0 != 0 goto label11;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addRow(androidx.constraintlayout.solver.ArrayRow)>($r1);

     label11:
        return;
    }

    public androidx.constraintlayout.solver.ArrayRow addEquality(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2;
        int $i0, $i1;
        androidx.constraintlayout.solver.ArrayRow $r3;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $i0);

        if $i1 == 6 goto label1;

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>($r0, $i1);

     label1:
        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

        return $r3;
    }

    public void addEquality(androidx.constraintlayout.solver.SolverVariable, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1;
        int $i0, $i1, $i2;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.ArrayRow $r3;
        boolean $z0;
        float $f0;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r4;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter1: int;

        $i1 = $r1.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        $i2 = $r1.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if $i2 == -1 goto label4;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i1];

        $z0 = $r3.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z0 == 0 goto label1;

        $f0 = (float) $i0;

        $r3.<androidx.constraintlayout.solver.ArrayRow: float constantValue> = $f0;

        goto label3;

     label1:
        $r4 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $i1 = $r4.<androidx.constraintlayout.solver.ArrayLinkedVariables: int currentSize>;

        if $i1 != 0 goto label2;

        $r3.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition> = 1;

        $f0 = (float) $i0;

        $r3.<androidx.constraintlayout.solver.ArrayRow: float constantValue> = $f0;

        goto label3;

     label2:
        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,int)>($r1, $i0);

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

     label3:
        return;

     label4:
        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowDefinition(androidx.constraintlayout.solver.SolverVariable,int)>($r1, $i0);

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

        return;
    }

    public void addEquality(androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1;
        int $i0, $i1, $i2, $i3;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.ArrayRow $r3;
        boolean $z0;
        float $f0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r1.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        $i3 = $r1.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if $i3 == -1 goto label3;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i2];

        $z0 = $r3.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z0 == 0 goto label1;

        $f0 = (float) $i0;

        $r3.<androidx.constraintlayout.solver.ArrayRow: float constantValue> = $f0;

        goto label2;

     label1:
        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,int)>($r1, $i0);

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>($r0, $i1);

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

     label2:
        return;

     label3:
        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowDefinition(androidx.constraintlayout.solver.SolverVariable,int)>($r1, $i0);

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>($r0, $i1);

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

        return;
    }

    public void addGreaterBarrier(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r4;
        boolean $z0;
        androidx.constraintlayout.solver.ArrayRow $r3;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r5;
        float $f0;
        int $i0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $r4 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $r4.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $r4, 0);

        if $z0 == 0 goto label1;

        $r5 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f0 = virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $f0 = -1.0F * $f0;

        $i0 = (int) $f0;

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($r3, $i0, 1);

     label1:
        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

        return;
    }

    public void addGreaterThan(androidx.constraintlayout.solver.SolverVariable, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r3;
        int $i0;
        androidx.constraintlayout.solver.ArrayRow $r2;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $r3.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $r2.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.SolverVariable,int,androidx.constraintlayout.solver.SolverVariable)>($r1, $i0, $r3);

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r2);

        return;
    }

    public void addGreaterThan(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r4;
        int $i0, $i1;
        androidx.constraintlayout.solver.ArrayRow $r3;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r5;
        float $f0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $r4 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $r4.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $r4, $i0);

        if $i1 == 6 goto label1;

        $r5 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f0 = virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $f0 = -1.0F * $f0;

        $i0 = (int) $f0;

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($r3, $i0, $i1);

     label1:
        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

        return;
    }

    public void addLowerBarrier(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r4;
        boolean $z0;
        androidx.constraintlayout.solver.ArrayRow $r3;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r5;
        float $f0;
        int $i0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $r4 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $r4.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $r4, 0);

        if $z0 == 0 goto label1;

        $r5 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f0 = virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $f0 = -1.0F * $f0;

        $i0 = (int) $f0;

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($r3, $i0, 1);

     label1:
        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

        return;
    }

    public void addLowerThan(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r4;
        int $i0, $i1;
        androidx.constraintlayout.solver.ArrayRow $r3;
        androidx.constraintlayout.solver.ArrayLinkedVariables $r5;
        float $f0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $r4 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $r4.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($r1, $r2, $r4, $i0);

        if $i1 == 6 goto label1;

        $r5 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayLinkedVariables variables>;

        $f0 = virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayLinkedVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $f0 = -1.0F * $f0;

        $i0 = (int) $f0;

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($r3, $i0, $i1);

     label1:
        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r3);

        return;
    }

    public void addRatio(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, float, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.SolverVariable $r1, $r2, $r3, $r4;
        float $f0;
        int $i0;
        androidx.constraintlayout.solver.ArrayRow $r5;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $r3 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $r4 := @parameter3: androidx.constraintlayout.solver.SolverVariable;

        $f0 := @parameter4: float;

        $i0 := @parameter5: int;

        $r5 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowDimensionRatio(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($r1, $r2, $r3, $r4, $f0);

        if $i0 == 6 goto label1;

        virtualinvoke $r5.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>($r0, $i0);

     label1:
        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($r5);

        return;
    }

    void addSingleError(androidx.constraintlayout.solver.ArrayRow, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1;
        int $i0, $i1;
        androidx.constraintlayout.solver.SolverVariable $r2;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createErrorVariable(int,java.lang.String)>($i1, null);

        virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addSingleError(androidx.constraintlayout.solver.SolverVariable,int)>($r2, $i0);

        return;
    }

    public androidx.constraintlayout.solver.SolverVariable createErrorVariable(int, java.lang.String)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i2, $i3;
        java.lang.String $r1;
        androidx.constraintlayout.solver.SolverVariable $r2;
        androidx.constraintlayout.solver.Metrics $r3;
        long $l1;
        androidx.constraintlayout.solver.SolverVariable$Type $r4;
        androidx.constraintlayout.solver.Cache $r5;
        androidx.constraintlayout.solver.SolverVariable[] $r6;
        androidx.constraintlayout.solver.LinearSystem$Row $r7;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r3 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r3 == null goto label1;

        $l1 = $r3.<androidx.constraintlayout.solver.Metrics: long errors>;

        $l1 = $l1 + 1L;

        $r3.<androidx.constraintlayout.solver.Metrics: long errors> = $l1;

     label1:
        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i2 = $i2 + 1;

        $i3 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if $i2 < $i3 goto label2;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        $r4 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type ERROR>;

        $r2 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($r4, $r1);

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $i2 = $i2 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = $i2;

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i2 = $i2 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $i2;

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r2.<androidx.constraintlayout.solver.SolverVariable: int id> = $i2;

        $r2.<androidx.constraintlayout.solver.SolverVariable: int strength> = $i0;

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r6 = $r5.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r6[$i0] = $r2;

        $r7 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        interfaceinvoke $r7.<androidx.constraintlayout.solver.LinearSystem$Row: void addError(androidx.constraintlayout.solver.SolverVariable)>($r2);

        return $r2;
    }

    public androidx.constraintlayout.solver.SolverVariable createExtraVariable()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i2;
        androidx.constraintlayout.solver.SolverVariable $r1;
        androidx.constraintlayout.solver.Metrics $r2;
        long $l1;
        androidx.constraintlayout.solver.SolverVariable$Type $r3;
        androidx.constraintlayout.solver.Cache $r4;
        androidx.constraintlayout.solver.SolverVariable[] $r5;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label1;

        $l1 = $r2.<androidx.constraintlayout.solver.Metrics: long extravariables>;

        $l1 = $l1 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long extravariables> = $l1;

     label1:
        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if $i0 < $i2 goto label2;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        $r3 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK>;

        $r1 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($r3, null);

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r1.<androidx.constraintlayout.solver.SolverVariable: int id> = $i0;

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r5[$i0] = $r1;

        return $r1;
    }

    public androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.Object $r1;
        int $i0, $i1;
        boolean $z0;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $r2;
        androidx.constraintlayout.solver.SolverVariable $r3, $r4;
        androidx.constraintlayout.solver.Cache $r5;
        androidx.constraintlayout.solver.SolverVariable[] $r6;
        androidx.constraintlayout.solver.SolverVariable$Type $r7;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if $i0 < $i1 goto label2;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        $z0 = $r1 instanceof androidx.constraintlayout.solver.widgets.ConstraintAnchor;

        if $z0 == 0 goto label6;

        $r2 = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $r1;

        $r3 = virtualinvoke $r2.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.SolverVariable getSolverVariable()>();

        $r4 = $r3;

        if $r3 != null goto label3;

        $r2 = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $r1;

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        virtualinvoke $r2.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: void resetSolverVariable(androidx.constraintlayout.solver.Cache)>($r5);

        $r2 = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $r1;

        $r4 = virtualinvoke $r2.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.SolverVariable getSolverVariable()>();

     label3:
        $i0 = $r4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if $i0 == -1 goto label4;

        $i0 = $r4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        if $i0 > $i1 goto label4;

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r6 = $r5.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i0 = $r4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $r3 = $r6[$i0];

        if $r3 != null goto label7;

     label4:
        $i0 = $r4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if $i0 == -1 goto label5;

        virtualinvoke $r4.<androidx.constraintlayout.solver.SolverVariable: void reset()>();

     label5:
        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r4.<androidx.constraintlayout.solver.SolverVariable: int id> = $i0;

        $r7 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        $r4.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType> = $r7;

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r6 = $r5.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r6[$i0] = $r4;

        return $r4;

     label6:
        return null;

     label7:
        return $r4;
    }

    public androidx.constraintlayout.solver.ArrayRow createRow()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1;
        androidx.constraintlayout.solver.Cache $r2;
        java.lang.Object $r3;
        androidx.constraintlayout.solver.Pools$Pool $r4;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r4 = $r2.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool arrayRowPool>;

        $r3 = interfaceinvoke $r4.<androidx.constraintlayout.solver.Pools$Pool: java.lang.Object acquire()>();

        $r1 = (androidx.constraintlayout.solver.ArrayRow) $r3;

        if $r1 != null goto label1;

        $r1 = new androidx.constraintlayout.solver.ArrayRow;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: void <init>(androidx.constraintlayout.solver.Cache)>($r2);

        goto label2;

     label1:
        virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: void reset()>();

     label2:
        staticinvoke <androidx.constraintlayout.solver.SolverVariable: void increaseErrorId()>();

        return $r1;
    }

    public androidx.constraintlayout.solver.SolverVariable createSlackVariable()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i2;
        androidx.constraintlayout.solver.SolverVariable $r1;
        androidx.constraintlayout.solver.Metrics $r2;
        long $l1;
        androidx.constraintlayout.solver.SolverVariable$Type $r3;
        androidx.constraintlayout.solver.Cache $r4;
        androidx.constraintlayout.solver.SolverVariable[] $r5;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label1;

        $l1 = $r2.<androidx.constraintlayout.solver.Metrics: long slackvariables>;

        $l1 = $l1 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long slackvariables> = $l1;

     label1:
        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if $i0 < $i2 goto label2;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        $r3 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK>;

        $r1 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($r3, null);

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $i0 = $i0 + 1;

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $i0;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r1.<androidx.constraintlayout.solver.SolverVariable: int id> = $i0;

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $r5[$i0] = $r1;

        return $r1;
    }

    void displayReadableRows()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        androidx.constraintlayout.solver.ArrayRow[] $r3;
        androidx.constraintlayout.solver.ArrayRow $r4;
        androidx.constraintlayout.solver.LinearSystem$Row $r5;
        java.io.PrintStream $r6;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void displaySolverVariables()>();

        $r1 = " #  ";

        $i0 = 0;

     label1:
        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i0 >= $i1 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r4 = $r3[$i0];

        $r1 = virtualinvoke $r4.<androidx.constraintlayout.solver.ArrayRow: java.lang.String toReadableString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n #  ");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        if $r5 == null goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;
    }

    void displaySystemInformations()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i1, $i2, $i3;
        androidx.constraintlayout.solver.ArrayRow[] $r1;
        androidx.constraintlayout.solver.ArrayRow $r2;
        java.io.PrintStream $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 = 0;

        $i1 = 0;

     label1:
        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        if $i1 >= $i2 goto label3;

        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r2 = $r1[$i1];

        if $r2 == null goto label2;

        $r2 = $r1[$i1];

        $i2 = virtualinvoke $r2.<androidx.constraintlayout.solver.ArrayRow: int sizeInBytes()>();

        $i0 = $i0 + $i2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = 0;

        $i2 = 0;

     label4:
        $i3 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i2 >= $i3 goto label6;

        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r2 = $r1[$i2];

        if $r2 == null goto label5;

        $r2 = $r1[$i2];

        $i3 = virtualinvoke $r2.<androidx.constraintlayout.solver.ArrayRow: int sizeInBytes()>();

        $i1 = $i1 + $i3;

     label5:
        $i2 = $i2 + 1;

        goto label4;

     label6:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Linear System -> Table size: ");

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $i2 = $i2 * $i2;

        $r5 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") -- row sizes: ");

        $r5 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual size: ");

        $r5 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows: ");

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cols: ");

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" occupied cells, ");

        $r5 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>(0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public void displayVariablesReadableRows()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.String $r1;
        int $i0, $i1;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.ArrayRow $r3;
        androidx.constraintlayout.solver.SolverVariable $r4;
        androidx.constraintlayout.solver.SolverVariable$Type $r5, $r6;
        java.lang.StringBuilder $r7;
        androidx.constraintlayout.solver.LinearSystem$Row $r8;
        java.io.PrintStream $r9;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void displaySolverVariables()>();

        $r1 = "";

        $i0 = 0;

     label1:
        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i0];

        $r4 = $r3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $r5 = $r4.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        $r6 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if $r5 != $r6 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i0];

        $r1 = virtualinvoke $r3.<androidx.constraintlayout.solver.ArrayRow: java.lang.String toReadableString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;
    }

    public void fillMetrics(androidx.constraintlayout.solver.Metrics)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.Metrics $r1;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.Metrics;

        <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics> = $r1;

        return;
    }

    public androidx.constraintlayout.solver.Cache getCache()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.Cache r1;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        return r1;
    }

    androidx.constraintlayout.solver.LinearSystem$Row getGoal()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.LinearSystem$Row r1;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        return r1;
    }

    public int getMemoryUsed()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.ArrayRow $r1;
        int $i0, $i1, $i2;
        androidx.constraintlayout.solver.ArrayRow[] $r2;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i1 = 0;

        $i2 = 0;

     label1:
        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i2 >= $i0 goto label3;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r1 = $r2[$i2];

        if $r1 == null goto label2;

        $r1 = $r2[$i2];

        $i0 = virtualinvoke $r1.<androidx.constraintlayout.solver.ArrayRow: int sizeInBytes()>();

        $i1 = $i1 + $i0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return $i1;
    }

    public int getNumEquations()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int i0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        return i0;
    }

    public int getNumVariables()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int i0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        return i0;
    }

    public int getObjectVariableValue(java.lang.Object)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.Object $r1;
        androidx.constraintlayout.solver.SolverVariable $r2;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $r3;
        float $f0;
        int $i0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: java.lang.Object;

        $r3 = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $r1;

        $r2 = virtualinvoke $r3.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.SolverVariable getSolverVariable()>();

        if $r2 == null goto label1;

        $f0 = $r2.<androidx.constraintlayout.solver.SolverVariable: float computedValue>;

        $f0 = $f0 + 0.5F;

        $i0 = (int) $f0;

        return $i0;

     label1:
        return 0;
    }

    androidx.constraintlayout.solver.ArrayRow getRow(int)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0;
        androidx.constraintlayout.solver.ArrayRow[] $r1;
        androidx.constraintlayout.solver.ArrayRow $r2;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 := @parameter0: int;

        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r2 = $r1[$i0];

        return $r2;
    }

    float getValueFor(java.lang.String)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.String $r1;
        androidx.constraintlayout.solver.SolverVariable $r2;
        androidx.constraintlayout.solver.SolverVariable$Type $r3;
        float f0;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: java.lang.String;

        $r3 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        $r2 = virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable getVariable(java.lang.String,androidx.constraintlayout.solver.SolverVariable$Type)>($r1, $r3);

        if $r2 != null goto label1;

        return 0.0F;

     label1:
        f0 = $r2.<androidx.constraintlayout.solver.SolverVariable: float computedValue>;

        return f0;
    }

    androidx.constraintlayout.solver.SolverVariable getVariable(java.lang.String, androidx.constraintlayout.solver.SolverVariable$Type)
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        java.lang.String $r1;
        androidx.constraintlayout.solver.SolverVariable$Type $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        androidx.constraintlayout.solver.SolverVariable $r5;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: androidx.constraintlayout.solver.SolverVariable$Type;

        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        if $r3 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables> = $r3;

     label1:
        $r3 = $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (androidx.constraintlayout.solver.SolverVariable) $r4;

        if $r5 != null goto label2;

        $r5 = specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createVariable(java.lang.String,androidx.constraintlayout.solver.SolverVariable$Type)>($r1, $r2);

     label2:
        return $r5;
    }

    public void minimize() throws java.lang.Exception
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        boolean $z0, $z1;
        androidx.constraintlayout.solver.Metrics $r1;
        long $l0;
        int $i1, $i2;
        androidx.constraintlayout.solver.ArrayRow[] $r2;
        androidx.constraintlayout.solver.ArrayRow $r3;
        androidx.constraintlayout.solver.LinearSystem$Row $r4;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r1 == null goto label1;

        $l0 = $r1.<androidx.constraintlayout.solver.Metrics: long minimize>;

        $l0 = $l0 + 1L;

        $r1.<androidx.constraintlayout.solver.Metrics: long minimize> = $l0;

     label1:
        $z0 = $r0.<androidx.constraintlayout.solver.LinearSystem: boolean graphOptimizer>;

        if $z0 == 0 goto label9;

        $r1 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r1 == null goto label2;

        $l0 = $r1.<androidx.constraintlayout.solver.Metrics: long graphOptimizer>;

        $l0 = $l0 + 1L;

        $r1.<androidx.constraintlayout.solver.Metrics: long graphOptimizer> = $l0;

     label2:
        $z1 = 1;

        $i1 = 0;

     label3:
        $i2 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i1 >= $i2 goto label5;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r3 = $r2[$i1];

        $z0 = $r3.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $z0 != 0 goto label4;

        $z1 = 0;

        goto label5;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        if $z1 != 0 goto label6;

        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row)>($r4);

        goto label8;

     label6:
        $r1 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r1 == null goto label7;

        $l0 = $r1.<androidx.constraintlayout.solver.Metrics: long fullySolved>;

        $l0 = $l0 + 1L;

        $r1.<androidx.constraintlayout.solver.Metrics: long fullySolved> = $l0;

     label7:
        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void computeValues()>();

     label8:
        return;

     label9:
        $r4 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row)>($r4);

        return;
    }

    void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row) throws java.lang.Exception
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        androidx.constraintlayout.solver.LinearSystem$Row $r1;
        androidx.constraintlayout.solver.Metrics $r2;
        long $l0, $l2;
        int $i1;
        androidx.constraintlayout.solver.ArrayRow $r3;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $r1 := @parameter0: androidx.constraintlayout.solver.LinearSystem$Row;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $r2 == null goto label1;

        $l0 = $r2.<androidx.constraintlayout.solver.Metrics: long minimizeGoal>;

        $l0 = $l0 + 1L;

        $r2.<androidx.constraintlayout.solver.Metrics: long minimizeGoal> = $l0;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $l0 = $r2.<androidx.constraintlayout.solver.Metrics: long maxVariables>;

        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $l2 = (long) $i1;

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l2);

        $r2.<androidx.constraintlayout.solver.Metrics: long maxVariables> = $l0;

        $r2 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $l0 = $r2.<androidx.constraintlayout.solver.Metrics: long maxRows>;

        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $l2 = (long) $i1;

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l2);

        $r2.<androidx.constraintlayout.solver.Metrics: long maxRows> = $l0;

     label1:
        $r3 = (androidx.constraintlayout.solver.ArrayRow) $r1;

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void updateRowFromVariables(androidx.constraintlayout.solver.ArrayRow)>($r3);

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: int enforceBFS(androidx.constraintlayout.solver.LinearSystem$Row)>($r1);

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: int optimize(androidx.constraintlayout.solver.LinearSystem$Row,boolean)>($r1, 0);

        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void computeValues()>();

        return;
    }

    public void reset()
    {
        androidx.constraintlayout.solver.LinearSystem $r0;
        int $i0, $i1;
        androidx.constraintlayout.solver.Cache $r1;
        androidx.constraintlayout.solver.SolverVariable[] $r2;
        androidx.constraintlayout.solver.SolverVariable $r3;
        androidx.constraintlayout.solver.Pools$Pool $r4;
        java.util.HashMap $r5;
        androidx.constraintlayout.solver.LinearSystem$Row $r6;
        androidx.constraintlayout.solver.ArrayRow[] $r7;
        androidx.constraintlayout.solver.ArrayRow $r8;

        $r0 := @this: androidx.constraintlayout.solver.LinearSystem;

        $i0 = 0;

     label1:
        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r2 = $r1.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r2 = $r1.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $r3 = $r2[$i0];

        if $r3 == null goto label2;

        virtualinvoke $r3.<androidx.constraintlayout.solver.SolverVariable: void reset()>();

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r4 = $r1.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool solverVariablePool>;

        $r2 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables>;

        $i0 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount>;

        interfaceinvoke $r4.<androidx.constraintlayout.solver.Pools$Pool: void releaseAll(java.lang.Object[],int)>($r2, $i0);

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount> = 0;

        $r1 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $r2 = $r1.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

        $r5 = $r0.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        if $r5 == null goto label4;

        virtualinvoke $r5.<java.util.HashMap: void clear()>();

     label4:
        $r0.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = 0;

        $r6 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        interfaceinvoke $r6.<androidx.constraintlayout.solver.LinearSystem$Row: void clear()>();

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = 1;

        $i0 = 0;

     label5:
        $i1 = $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if $i0 >= $i1 goto label6;

        $r7 = $r0.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $r8 = $r7[$i0];

        $r8.<androidx.constraintlayout.solver.ArrayRow: boolean used> = 0;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        specialinvoke $r0.<androidx.constraintlayout.solver.LinearSystem: void releaseRows()>();

        $r0.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = 0;

        return;
    }
}
