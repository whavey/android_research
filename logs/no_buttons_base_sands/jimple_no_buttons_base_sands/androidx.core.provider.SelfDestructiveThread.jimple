public class androidx.core.provider.SelfDestructiveThread extends java.lang.Object
{
    private static final int MSG_DESTRUCTION;
    private static final int MSG_INVOKE_RUNNABLE;
    private android.os.Handler$Callback mCallback;
    private final int mDestructAfterMillisec;
    private int mGeneration;
    private android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private final int mPriority;
    private android.os.HandlerThread mThread;
    private final java.lang.String mThreadName;

    public void <init>(java.lang.String, int, int)
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        androidx.core.provider.SelfDestructiveThread$1 $r3;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock> = $r2;

        $r3 = new androidx.core.provider.SelfDestructiveThread$1;

        specialinvoke $r3.<androidx.core.provider.SelfDestructiveThread$1: void <init>(androidx.core.provider.SelfDestructiveThread)>($r0);

        $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback> = $r3;

        $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.String mThreadName> = $r1;

        $r0.<androidx.core.provider.SelfDestructiveThread: int mPriority> = $i0;

        $r0.<androidx.core.provider.SelfDestructiveThread: int mDestructAfterMillisec> = $i1;

        $r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration> = 0;

        return;
    }

    private void post(java.lang.Runnable)
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.lang.Runnable $r1;
        java.lang.Object $r2;
        android.os.HandlerThread $r3;
        java.lang.String $r4;
        int $i0;
        android.os.Handler $r5, $r8;
        android.os.Looper $r6;
        android.os.Handler$Callback $r7;
        android.os.Message $r9;
        java.lang.Throwable $r10;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $r3 != null goto label2;

        $r3 = new android.os.HandlerThread;

        $r4 = $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.String mThreadName>;

        $i0 = $r0.<androidx.core.provider.SelfDestructiveThread: int mPriority>;

        specialinvoke $r3.<android.os.HandlerThread: void <init>(java.lang.String,int)>($r4, $i0);

        $r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = $r3;

        $r3 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        virtualinvoke $r3.<android.os.HandlerThread: void start()>();

        $r5 = new android.os.Handler;

        $r3 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        $r6 = virtualinvoke $r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r7 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback>;

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r6, $r7);

        $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler> = $r5;

        $i0 = $r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration>;

        $i0 = $i0 + 1;

        $r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration> = $i0;

     label2:
        $r5 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(0);

        $r5 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r8 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r1);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r9);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getGeneration()
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        int i0;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 = $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        i0 = $r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration>;

        exitmonitor $r1;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isRunning()
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.lang.Object $r1;
        android.os.HandlerThread $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 = $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void onDestruction()
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.lang.Object $r1;
        boolean $z0;
        android.os.Handler $r2;
        android.os.HandlerThread $r3;
        java.lang.Throwable $r4;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 = $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r2.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z0 == 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        virtualinvoke $r3.<android.os.HandlerThread: boolean quit()>();

        $r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = null;

        $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler> = null;

        exitmonitor $r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void onInvokeRunnable(java.lang.Runnable)
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.lang.Runnable $r1;
        java.lang.Object $r2;
        android.os.Message $r3;
        android.os.Handler $r4, $r5;
        int $i0;
        long $l1;
        java.lang.Throwable $r6;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.lang.Runnable;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        $r2 = $r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r4 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(0);

        $r4 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r5 = $r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        $i0 = $r0.<androidx.core.provider.SelfDestructiveThread: int mDestructAfterMillisec>;

        $l1 = (long) $i0;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l1);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void postAndReply(java.util.concurrent.Callable, androidx.core.provider.SelfDestructiveThread$ReplyCallback)
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.util.concurrent.Callable $r1;
        androidx.core.provider.SelfDestructiveThread$ReplyCallback $r2;
        android.os.Handler $r3;
        androidx.core.provider.SelfDestructiveThread$2 $r4;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r2 := @parameter1: androidx.core.provider.SelfDestructiveThread$ReplyCallback;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>()>();

        $r4 = new androidx.core.provider.SelfDestructiveThread$2;

        specialinvoke $r4.<androidx.core.provider.SelfDestructiveThread$2: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.Callable,android.os.Handler,androidx.core.provider.SelfDestructiveThread$ReplyCallback)>($r0, $r1, $r3, $r2);

        specialinvoke $r0.<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($r4);

        return;
    }

    public java.lang.Object postAndWait(java.util.concurrent.Callable, int) throws java.lang.InterruptedException
    {
        androidx.core.provider.SelfDestructiveThread $r0;
        java.util.concurrent.Callable $r1;
        int $i0;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.util.concurrent.locks.Condition $r5;
        androidx.core.provider.SelfDestructiveThread$3 $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.util.concurrent.TimeUnit $r8;
        long $l1, $l2;
        java.lang.Throwable $r9, $r11;
        byte $b3;
        java.lang.InterruptedException $r10;

        $r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $i0 := @parameter1: int;

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r5 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        $r6 = new androidx.core.provider.SelfDestructiveThread$3;

        specialinvoke $r6.<androidx.core.provider.SelfDestructiveThread$3: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Callable,java.util.concurrent.locks.ReentrantLock,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.locks.Condition)>($r0, $r2, $r1, $r3, $r4, $r5);

        specialinvoke $r0.<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($r6);

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label02:
        if $z0 != 0 goto label05;

     label03:
        $r7 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label04:
        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $r7;

     label05:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label06:
        $l1 = (long) $i0;

     label07:
        $l1 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

     label08:
        $l2 = interfaceinvoke $r5.<java.util.concurrent.locks.Condition: long awaitNanos(long)>($l1);

     label09:
        $l1 = $l2;

        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label12:
        if $z0 != 0 goto label15;

     label13:
        $r7 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label14:
        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $r7;

     label15:
        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label16;

        goto label08;

     label16:
        $r10 = new java.lang.InterruptedException;

        specialinvoke $r10.<java.lang.InterruptedException: void <init>(java.lang.String)>("timeout");

        throw $r10;

     label17:
        $r11 := @caughtexception;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

    public static void <clinit>()
    {
        <androidx.core.provider.SelfDestructiveThread: int MSG_INVOKE_RUNNABLE> = 1;

        <androidx.core.provider.SelfDestructiveThread: int MSG_DESTRUCTION> = 0;

        return;
    }
}
