public abstract class androidx.loader.content.AsyncTaskLoader extends androidx.loader.content.Loader
{
    static final boolean DEBUG;
    static final java.lang.String TAG;
    volatile androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask;
    private final java.util.concurrent.Executor mExecutor;
    android.os.Handler mHandler;
    long mLastLoadCompleteTime;
    volatile androidx.loader.content.AsyncTaskLoader$LoadTask mTask;
    long mUpdateThrottle;

    public void <init>(android.content.Context)
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        android.content.Context $r1;
        java.util.concurrent.Executor $r2;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 := @parameter0: android.content.Context;

        $r2 = <androidx.loader.content.ModernAsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        specialinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void <init>(android.content.Context,java.util.concurrent.Executor)>($r1, $r2);

        return;
    }

    private void <init>(android.content.Context, java.util.concurrent.Executor)
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        android.content.Context $r1;
        java.util.concurrent.Executor $r2;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke $r0.<androidx.loader.content.Loader: void <init>(android.content.Context)>($r1);

        $r0.<androidx.loader.content.AsyncTaskLoader: long mLastLoadCompleteTime> = -10000L;

        $r0.<androidx.loader.content.AsyncTaskLoader: java.util.concurrent.Executor mExecutor> = $r2;

        return;
    }

    public void cancelLoadInBackground()
    {
        androidx.loader.content.AsyncTaskLoader $r0;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        return;
    }

    void dispatchOnCancelled(androidx.loader.content.AsyncTaskLoader$LoadTask, java.lang.Object)
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1, $r3;
        java.lang.Object $r2;
        long $l0;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 := @parameter0: androidx.loader.content.AsyncTaskLoader$LoadTask;

        $r2 := @parameter1: java.lang.Object;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void onCanceled(java.lang.Object)>($r2);

        $r3 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r3 != $r1 goto label1;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void rollbackContentChanged()>();

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r0.<androidx.loader.content.AsyncTaskLoader: long mLastLoadCompleteTime> = $l0;

        $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask> = null;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void deliverCancellation()>();

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void executePendingTask()>();

     label1:
        return;
    }

    void dispatchOnLoadComplete(androidx.loader.content.AsyncTaskLoader$LoadTask, java.lang.Object)
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1, $r3;
        java.lang.Object $r2;
        boolean $z0;
        long $l0;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 := @parameter0: androidx.loader.content.AsyncTaskLoader$LoadTask;

        $r2 := @parameter1: java.lang.Object;

        $r3 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        if $r3 == $r1 goto label1;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void dispatchOnCancelled(androidx.loader.content.AsyncTaskLoader$LoadTask,java.lang.Object)>($r1, $r2);

        return;

     label1:
        $z0 = virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: boolean isAbandoned()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void onCanceled(java.lang.Object)>($r2);

        return;

     label2:
        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void commitContentChanged()>();

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r0.<androidx.loader.content.AsyncTaskLoader: long mLastLoadCompleteTime> = $l0;

        $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask> = null;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void deliverResult(java.lang.Object)>($r2);

        return;
    }

    public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        java.lang.String $r1;
        java.io.FileDescriptor $r2;
        java.io.PrintWriter $r3;
        java.lang.String[] $r4;
        byte $b0;
        long $l1, $l2;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r5;
        boolean $z0;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.FileDescriptor;

        $r3 := @parameter2: java.io.PrintWriter;

        $r4 := @parameter3: java.lang.String[];

        specialinvoke $r0.<androidx.loader.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>($r1, $r2, $r3, $r4);

        $r5 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        if $r5 == null goto label1;

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>($r1);

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>("mTask=");

        $r5 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>(" waiting=");

        $r5 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $z0 = $r5.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        virtualinvoke $r3.<java.io.PrintWriter: void println(boolean)>($z0);

     label1:
        $r5 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r5 == null goto label2;

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>($r1);

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>("mCancellingTask=");

        $r5 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>(" waiting=");

        $r5 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        $z0 = $r5.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        virtualinvoke $r3.<java.io.PrintWriter: void println(boolean)>($z0);

     label2:
        $l1 = $r0.<androidx.loader.content.AsyncTaskLoader: long mUpdateThrottle>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label3;

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>($r1);

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>("mUpdateThrottle=");

        $l1 = $r0.<androidx.loader.content.AsyncTaskLoader: long mUpdateThrottle>;

        staticinvoke <androidx.core.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l1, $r3);

        virtualinvoke $r3.<java.io.PrintWriter: void print(java.lang.String)>(" mLastLoadCompleteTime=");

        $l2 = $r0.<androidx.loader.content.AsyncTaskLoader: long mLastLoadCompleteTime>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <androidx.core.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l2, $l1, $r3);

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

     label3:
        return;
    }

    void executePendingTask()
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        long $l0, $l2, $l3;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1;
        boolean $z0;
        android.os.Handler $r2;
        byte $b1;
        java.util.concurrent.Executor $r3;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r1 != null goto label3;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        if $r1 == null goto label3;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $z0 = $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        if $z0 == 0 goto label1;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting> = 0;

        $r2 = $r0.<androidx.loader.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

     label1:
        $l0 = $r0.<androidx.loader.content.AsyncTaskLoader: long mUpdateThrottle>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = $r0.<androidx.loader.content.AsyncTaskLoader: long mLastLoadCompleteTime>;

        $l3 = $r0.<androidx.loader.content.AsyncTaskLoader: long mUpdateThrottle>;

        $l2 = $l2 + $l3;

        $b1 = $l0 cmp $l2;

        if $b1 >= 0 goto label2;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting> = 1;

        $r2 = $r0.<androidx.loader.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $l2 = $r0.<androidx.loader.content.AsyncTaskLoader: long mLastLoadCompleteTime>;

        $l0 = $r0.<androidx.loader.content.AsyncTaskLoader: long mUpdateThrottle>;

        $l0 = $l2 + $l0;

        virtualinvoke $r2.<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>($r1, $l0);

        return;

     label2:
        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $r3 = $r0.<androidx.loader.content.AsyncTaskLoader: java.util.concurrent.Executor mExecutor>;

        virtualinvoke $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: androidx.loader.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r3, null);

     label3:
        return;
    }

    public boolean isLoadInBackgroundCanceled()
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract java.lang.Object loadInBackground();

    protected boolean onCancelLoad()
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        boolean $z0;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1;
        android.os.Handler $r2;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        if $r1 == null goto label6;

        $z0 = $r0.<androidx.loader.content.AsyncTaskLoader: boolean mStarted>;

        if $z0 != 0 goto label1;

        $r0.<androidx.loader.content.AsyncTaskLoader: boolean mContentChanged> = 1;

     label1:
        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r1 == null goto label3;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $z0 = $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        if $z0 == 0 goto label2;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting> = 0;

        $r2 = $r0.<androidx.loader.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

     label2:
        $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask> = null;

        return 0;

     label3:
        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $z0 = $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        if $z0 == 0 goto label4;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean waiting> = 0;

        $r2 = $r0.<androidx.loader.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask> = null;

        return 0;

     label4:
        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $z0 = virtualinvoke $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: boolean cancel(boolean)>(0);

        if $z0 == 0 goto label5;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask> = $r1;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void cancelLoadInBackground()>();

     label5:
        $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask> = null;

        return $z0;

     label6:
        return 0;
    }

    public void onCanceled(java.lang.Object)
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        java.lang.Object $r1;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 := @parameter0: java.lang.Object;

        return;
    }

    protected void onForceLoad()
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        specialinvoke $r0.<androidx.loader.content.Loader: void onForceLoad()>();

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: boolean cancelLoad()>();

        $r1 = new androidx.loader.content.AsyncTaskLoader$LoadTask;

        specialinvoke $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: void <init>(androidx.loader.content.AsyncTaskLoader)>($r0);

        $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask> = $r1;

        virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: void executePendingTask()>();

        return;
    }

    protected java.lang.Object onLoadInBackground()
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        java.lang.Object $r1;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 = virtualinvoke $r0.<androidx.loader.content.AsyncTaskLoader: java.lang.Object loadInBackground()>();

        return $r1;
    }

    public void setUpdateThrottle(long)
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        long $l0;
        byte $b1;
        android.os.Handler $r1;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $l0 := @parameter0: long;

        $r0.<androidx.loader.content.AsyncTaskLoader: long mUpdateThrottle> = $l0;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<android.os.Handler: void <init>()>();

        $r0.<androidx.loader.content.AsyncTaskLoader: android.os.Handler mHandler> = $r1;

     label1:
        return;
    }

    public void waitForLoader()
    {
        androidx.loader.content.AsyncTaskLoader $r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1;

        $r0 := @this: androidx.loader.content.AsyncTaskLoader;

        $r1 = $r0.<androidx.loader.content.AsyncTaskLoader: androidx.loader.content.AsyncTaskLoader$LoadTask mTask>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<androidx.loader.content.AsyncTaskLoader$LoadTask: void waitForLoader()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <androidx.loader.content.AsyncTaskLoader: java.lang.String TAG> = "AsyncTaskLoader";

        <androidx.loader.content.AsyncTaskLoader: boolean DEBUG> = 0;

        return;
    }
}
