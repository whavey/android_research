class androidx.core.graphics.TypefaceCompatBaseImpl extends java.lang.Object
{
    private static final java.lang.String CACHE_FILE_PREFIX;
    private static final java.lang.String TAG;

    void <init>()
    {
        androidx.core.graphics.TypefaceCompatBaseImpl $r0;

        $r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl $r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r1;
        int $i0;
        androidx.core.graphics.TypefaceCompatBaseImpl$2 $r2;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] $r3;
        java.lang.Object $r4;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r5;

        $r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $r1 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        $i0 := @parameter1: int;

        $r3 = virtualinvoke $r1.<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>();

        $r2 = new androidx.core.graphics.TypefaceCompatBaseImpl$2;

        specialinvoke $r2.<androidx.core.graphics.TypefaceCompatBaseImpl$2: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>($r0);

        $r4 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>($r3, $i0, $r2);

        $r5 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) $r4;

        return $r5;
    }

    private static java.lang.Object findBestFont(java.lang.Object[], int, androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)
    {
        java.lang.Object[] $r0;
        int $i0, $i1, $i3, $i4;
        androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor $r1;
        java.lang.Object $r2, $r3;
        short $s2;
        boolean $z0, $z1;
        byte $b5;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label01;

        $s2 = 400;

        goto label02;

     label01:
        $s2 = 700;

     label02:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        $i0 = lengthof $r0;

        $i1 = 2147483647;

        $r3 = null;

        $i3 = 0;

     label05:
        if $i3 >= $i0 goto label10;

        $r2 = $r0[$i3];

        $i4 = interfaceinvoke $r1.<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: int getWeight(java.lang.Object)>($r2);

        $i4 = $i4 - $s2;

        $i4 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        $i4 = $i4 * 2;

        $z1 = interfaceinvoke $r1.<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: boolean isItalic(java.lang.Object)>($r2);

        if $z1 != $z0 goto label06;

        $b5 = 0;

        goto label07;

     label06:
        $b5 = 1;

     label07:
        $i4 = $i4 + $b5;

        if $r3 == null goto label08;

        if $i1 <= $i4 goto label09;

     label08:
        $r3 = $r2;

        $i1 = $i4;

     label09:
        $i3 = $i3 + 1;

        goto label05;

     label10:
        return $r3;
    }

    public android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, android.content.res.Resources, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl $r0;
        android.content.Context $r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r2;
        android.content.res.Resources $r3;
        int $i0, $i1;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r4;
        java.lang.String $r5;
        android.graphics.Typeface $r6;

        $r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        $r3 := @parameter2: android.content.res.Resources;

        $i0 := @parameter3: int;

        $r4 = specialinvoke $r0.<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int)>($r2, $i0);

        if $r4 != null goto label1;

        return null;

     label1:
        $i1 = virtualinvoke $r4.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getResourceId()>();

        $r5 = virtualinvoke $r4.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: java.lang.String getFileName()>();

        $r6 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>($r1, $r3, $i1, $r5, $i0);

        return $r6;
    }

    public android.graphics.Typeface createFromFontInfo(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl $r0;
        android.content.Context $r1;
        android.os.CancellationSignal $r2;
        androidx.core.provider.FontsContractCompat$FontInfo[] $r3;
        int $i0, $i1;
        androidx.core.provider.FontsContractCompat$FontInfo $r4;
        java.io.InputStream $r5, $r8;
        android.content.ContentResolver $r6;
        android.net.Uri $r7;
        android.graphics.Typeface $r9;
        java.lang.Throwable $r10, $r11;

        $r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.os.CancellationSignal;

        $r3 := @parameter2: androidx.core.provider.FontsContractCompat$FontInfo[];

        $i0 := @parameter3: int;

        $i1 = lengthof $r3;

        if $i1 >= 1 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r0.<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int)>($r3, $i0);

        $r5 = null;

     label2:
        $r6 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = virtualinvoke $r4.<androidx.core.provider.FontsContractCompat$FontInfo: android.net.Uri getUri()>();

        $r8 = virtualinvoke $r6.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r7);

     label3:
        $r5 = $r8;

     label4:
        $r9 = virtualinvoke $r0.<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream)>($r1, $r8);

     label5:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($r8);

        return $r9;

     label6:
        $r10 := @caughtexception;

        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($r5);

        throw $r10;

     label7:
        $r11 := @caughtexception;

        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($r5);

        return null;

        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    protected android.graphics.Typeface createFromInputStream(android.content.Context, java.io.InputStream)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl $r0;
        android.content.Context $r1;
        java.io.InputStream $r2;
        java.io.File $r3;
        boolean $z0;
        java.lang.String $r4;
        android.graphics.Typeface $r5;
        java.lang.Throwable $r6;
        java.lang.RuntimeException $r7;

        $r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.io.InputStream;

        $r3 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>($r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>($r3, $r2);

     label2:
        if $z0 != 0 goto label3;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        return null;

     label3:
        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($r4);

     label4:
        virtualinvoke $r3.<java.io.File: boolean delete()>();

        return $r5;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        throw $r6;

     label6:
        $r7 := @caughtexception;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.graphics.Typeface createFromResourcesFontFile(android.content.Context, android.content.res.Resources, int, java.lang.String, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl $r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0, $i1;
        java.lang.String $r3;
        java.io.File $r4;
        boolean $z0;
        android.graphics.Typeface $r5;
        java.lang.Throwable $r6;
        java.lang.RuntimeException $r7;

        $r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.content.res.Resources;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r4 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>($r1);

        if $r4 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>($r4, $r2, $i0);

     label2:
        if $z0 != 0 goto label3;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        return null;

     label3:
        $r3 = virtualinvoke $r4.<java.io.File: java.lang.String getPath()>();

        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($r3);

     label4:
        virtualinvoke $r4.<java.io.File: boolean delete()>();

        return $r5;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        throw $r6;

     label6:
        $r7 := @caughtexception;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl $r0;
        androidx.core.provider.FontsContractCompat$FontInfo[] $r1;
        int $i0;
        java.lang.Object $r2;
        androidx.core.graphics.TypefaceCompatBaseImpl$1 $r3;
        androidx.core.provider.FontsContractCompat$FontInfo $r4;

        $r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $r1 := @parameter0: androidx.core.provider.FontsContractCompat$FontInfo[];

        $i0 := @parameter1: int;

        $r3 = new androidx.core.graphics.TypefaceCompatBaseImpl$1;

        specialinvoke $r3.<androidx.core.graphics.TypefaceCompatBaseImpl$1: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>($r0);

        $r2 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>($r1, $i0, $r3);

        $r4 = (androidx.core.provider.FontsContractCompat$FontInfo) $r2;

        return $r4;
    }

    public static void <clinit>()
    {
        <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.String TAG> = "TypefaceCompatBaseImpl";

        <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.String CACHE_FILE_PREFIX> = "cached_font_";

        return;
    }
}
