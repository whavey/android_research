public class androidx.core.util.Preconditions extends java.lang.Object
{

    private void <init>()
    {
        androidx.core.util.Preconditions $r0;

        $r0 := @this: androidx.core.util.Preconditions;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkArgument(boolean)
    {
        boolean $z0;
        java.lang.IllegalArgumentException $r0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static void checkArgument(boolean, java.lang.Object)
    {
        boolean $z0;
        java.lang.Object $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.Object;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public static float checkArgumentFinite(float, java.lang.String)
    {
        float $f0;
        java.lang.String $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;

        $f0 := @parameter0: float;

        $r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);

        if $z0 != 0 goto label1;

        return $f0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be infinite");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be NaN");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static float checkArgumentInRange(float, float, float, java.lang.String)
    {
        float $f0, $f1, $f2;
        java.lang.String $r0;
        boolean $z0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;
        java.util.Locale $r2;
        java.lang.Object[] $r3;
        java.lang.Float $r4;
        java.lang.StringBuilder $r5;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $r0 := @parameter3: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 != 0 goto label3;

        $b0 = $f0 cmpg $f1;

        if $b0 < 0 goto label2;

        $b0 = $f0 cmpl $f2;

        if $b0 > 0 goto label1;

        return $f0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = $r0;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r3[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%f, %f] (too high)", $r3);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = $r0;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r3[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%f, %f] (too low)", $r3);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be NaN");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static int checkArgumentInRange(int, int, int, java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        java.util.Locale $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r0 := @parameter3: java.lang.String;

        if $i0 < $i1 goto label2;

        if $i0 > $i2 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = $r0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%d, %d] (too high)", $r3);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = $r0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%d, %d] (too low)", $r3);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static long checkArgumentInRange(long, long, long, java.lang.String)
    {
        long $l0, $l1, $l2;
        java.lang.String $r0;
        byte $b3;
        java.lang.IllegalArgumentException $r1;
        java.util.Locale $r2;
        java.lang.Object[] $r3;
        java.lang.Long $r4;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $r0 := @parameter3: java.lang.String;

        $b3 = $l0 cmp $l1;

        if $b3 < 0 goto label2;

        $b3 = $l0 cmp $l2;

        if $b3 > 0 goto label1;

        return $l0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = $r0;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r3[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%d, %d] (too high)", $r3);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = $r0;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r3[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%d, %d] (too low)", $r3);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static int checkArgumentNonnegative(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static int checkArgumentNonnegative(int, java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static long checkArgumentNonnegative(long)
    {
        long $l0;
        byte $b1;
        java.lang.IllegalArgumentException $r0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        return $l0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static long checkArgumentNonnegative(long, java.lang.String)
    {
        long $l0;
        java.lang.String $r0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.lang.String;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        return $l0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static int checkArgumentPositive(int, java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        if $i0 <= 0 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static float[] checkArrayElementsInRange(float[], float, float, java.lang.String)
    {
        float[] $r0;
        float $f0, $f1, $f2;
        java.lang.String $r1, $r3;
        java.lang.StringBuilder $r2;
        int $i0, $i1;
        boolean $z0;
        byte $b2;
        java.lang.IllegalArgumentException $r4;
        java.util.Locale $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.Float $r8;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r1 := @parameter3: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, $r3);

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label5;

        $f2 = $r0[$i0];

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f2);

        if $z0 != 0 goto label4;

        $b2 = $f2 cmpg $f0;

        if $b2 < 0 goto label3;

        $b2 = $f2 cmpl $f1;

        if $b2 > 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = <java.util.Locale: java.util.Locale US>;

        $r6 = newarray (java.lang.Object)[4];

        $r6[0] = $r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[1] = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r6[2] = $r8;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r6[3] = $r8;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r5, "%s[%d] is out of range of [%f, %f] (too high)", $r6);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = <java.util.Locale: java.util.Locale US>;

        $r6 = newarray (java.lang.Object)[4];

        $r6[0] = $r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[1] = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r6[2] = $r8;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r6[3] = $r8;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r5, "%s[%d] is out of range of [%f, %f] (too low)", $r6);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must not be NaN");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label5:
        return $r0;
    }

    public static java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;
        java.util.Locale $r4;
        java.lang.Integer $r5;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label3;

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label4;

        $r2 = $r0[$i0];

        if $r2 == null goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.NullPointerException;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = $r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[1] = $r5;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "%s[%d] must not be null", $r0);

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label3:
        $r3 = new java.lang.NullPointerException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label4:
        return $r0;
    }

    public static java.util.Collection checkCollectionElementsNotNull(java.util.Collection, java.lang.String)
    {
        java.util.Collection $r0;
        java.lang.String $r1;
        long $l0;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.NullPointerException $r4;
        java.util.Locale $r5;
        java.lang.Object[] $r6;
        java.lang.Long $r7;
        java.lang.StringBuilder $r8;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label3;

        $l0 = 0L;

        $r2 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 == null goto label2;

        $l0 = $l0 + 1L;

        goto label1;

     label2:
        $r4 = new java.lang.NullPointerException;

        $r5 = <java.util.Locale: java.util.Locale US>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r1;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6[1] = $r7;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r5, "%s[%d] must not be null", $r6);

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label3:
        $r4 = new java.lang.NullPointerException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label4:
        return $r0;
    }

    public static java.util.Collection checkCollectionNotEmpty(java.util.Collection, java.lang.String)
    {
        java.util.Collection $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.NullPointerException $r4;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label2;

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label2:
        $r4 = new java.lang.NullPointerException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

    public static int checkFlagsArgument(int, int)
    {
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 & $i1;

        if $i2 != $i0 goto label1;

        return $i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested flags 0x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but only 0x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are allowed");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.NullPointerException $r1;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;
    }

    public static java.lang.Object checkNotNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        java.lang.NullPointerException $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public static void checkState(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, null);

        return;
    }

    public static void checkState(boolean, java.lang.String)
    {
        boolean $z0;
        java.lang.String $r0;
        java.lang.IllegalStateException $r1;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public static java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence, java.lang.Object)
    {
        java.lang.CharSequence $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }
}
