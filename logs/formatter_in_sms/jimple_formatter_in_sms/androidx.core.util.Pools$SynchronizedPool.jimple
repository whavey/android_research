public class androidx.core.util.Pools$SynchronizedPool extends androidx.core.util.Pools$SimplePool
{
    private final java.lang.Object mLock;

    public void <init>(int)
    {
        androidx.core.util.Pools$SynchronizedPool $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: androidx.core.util.Pools$SynchronizedPool;

        $i0 := @parameter0: int;

        specialinvoke $r0.<androidx.core.util.Pools$SimplePool: void <init>(int)>($i0);

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<androidx.core.util.Pools$SynchronizedPool: java.lang.Object mLock> = $r1;

        return;
    }

    public java.lang.Object acquire()
    {
        androidx.core.util.Pools$SynchronizedPool $r0;
        java.lang.Object $r1, $r2;
        java.lang.Throwable $r3;

        $r0 := @this: androidx.core.util.Pools$SynchronizedPool;

        $r1 = $r0.<androidx.core.util.Pools$SynchronizedPool: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = specialinvoke $r0.<androidx.core.util.Pools$SimplePool: java.lang.Object acquire()>();

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean release(java.lang.Object)
    {
        androidx.core.util.Pools$SynchronizedPool $r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: androidx.core.util.Pools$SynchronizedPool;

        $r1 := @parameter0: java.lang.Object;

        $r2 = $r0.<androidx.core.util.Pools$SynchronizedPool: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $z0 = specialinvoke $r0.<androidx.core.util.Pools$SimplePool: boolean release(java.lang.Object)>($r1);

        exitmonitor $r2;

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
