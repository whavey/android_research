public abstract class androidx.core.graphics.drawable.RoundedBitmapDrawable extends android.graphics.drawable.Drawable
{
    private static final int DEFAULT_PAINT_FLAGS;
    private boolean mApplyGravity;
    final android.graphics.Bitmap mBitmap;
    private int mBitmapHeight;
    private final android.graphics.BitmapShader mBitmapShader;
    private int mBitmapWidth;
    private float mCornerRadius;
    final android.graphics.Rect mDstRect;
    private final android.graphics.RectF mDstRectF;
    private int mGravity;
    private boolean mIsCircular;
    private final android.graphics.Paint mPaint;
    private final android.graphics.Matrix mShaderMatrix;
    private int mTargetDensity;

    void <init>(android.content.res.Resources, android.graphics.Bitmap)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.content.res.Resources $r1;
        android.graphics.Bitmap $r2;
        android.graphics.Shader$TileMode $r3, $r4;
        android.util.DisplayMetrics $r5;
        android.graphics.Paint $r6;
        android.graphics.Matrix $r7;
        android.graphics.Rect $r8;
        android.graphics.RectF $r9;
        int $i0;
        android.graphics.BitmapShader $r10;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: android.graphics.Bitmap;

        specialinvoke $r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity> = 160;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity> = 119;

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(3);

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint> = $r6;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect> = $r8;

        $r9 = new android.graphics.RectF;

        specialinvoke $r9.<android.graphics.RectF: void <init>()>();

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF> = $r9;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        if $r1 == null goto label1;

        $r5 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r5.<android.util.DisplayMetrics: int densityDpi>;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity> = $i0;

     label1:
        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap> = $r2;

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label2;

        specialinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void computeBitmapSize()>();

        $r10 = new android.graphics.BitmapShader;

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $r3 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        $r4 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r10.<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>($r2, $r3, $r4);

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader> = $r10;

        return;

     label2:
        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight> = -1;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth> = -1;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader> = null;

        return;
    }

    private void computeBitmapSize()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.Bitmap $r1;
        int $i0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getScaledWidth(int)>($i0);

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth> = $i0;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getScaledHeight(int)>($i0);

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight> = $i0;

        return;
    }

    private static boolean isGreaterThanZero(float)
    {
        float $f0;
        byte $b0;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpl 0.05F;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void updateCircularCornerRadius()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0, $i1;
        float $f0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        $i1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i0 = $i0 / 2;

        $f0 = (float) $i0;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius> = $f0;

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.Canvas $r1;
        android.graphics.Bitmap $r2;
        android.graphics.Shader $r3;
        android.graphics.Paint $r4;
        android.graphics.Rect $r5;
        android.graphics.RectF $r6;
        float $f0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if $r2 != null goto label1;

        return;

     label1:
        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void updateDstRect()>();

        $r4 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r3 = virtualinvoke $r4.<android.graphics.Paint: android.graphics.Shader getShader()>();

        if $r3 != null goto label2;

        $r5 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $r4 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>($r2, null, $r5, $r4);

        return;

     label2:
        $r6 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        $r4 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r6, $f0, $f0, $r4);

        return;
    }

    public int getAlpha()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0;
        android.graphics.Paint $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $i0 = virtualinvoke $r1.<android.graphics.Paint: int getAlpha()>();

        return $i0;
    }

    public final android.graphics.Bitmap getBitmap()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.Bitmap r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        return r1;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.ColorFilter $r1;
        android.graphics.Paint $r2;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r1 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        return $r1;
    }

    public float getCornerRadius()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        float f0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        f0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        return f0;
    }

    public int getGravity()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int i0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        return i0;
    }

    public int getIntrinsicHeight()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int i0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        return i0;
    }

    public int getIntrinsicWidth()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int i0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        return i0;
    }

    public int getOpacity()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0;
        boolean $z0;
        android.graphics.Bitmap $r1;
        android.graphics.Paint $r2;
        float $f0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        if $i0 != 119 goto label3;

        $z0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        if $z0 == 0 goto label1;

        return -3;

     label1:
        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if $r1 == null goto label3;

        $z0 = virtualinvoke $r1.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z0 != 0 goto label3;

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $i0 = virtualinvoke $r2.<android.graphics.Paint: int getAlpha()>();

        if $i0 < 255 goto label3;

        $f0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        $z0 = staticinvoke <androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean isGreaterThanZero(float)>($f0);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        return -1;

     label3:
        return -3;
    }

    public final android.graphics.Paint getPaint()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.Paint r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        return r1;
    }

    void gravityCompatApply(int, int, int, android.graphics.Rect, android.graphics.Rect)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0, $i1, $i2;
        android.graphics.Rect $r1, $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: android.graphics.Rect;

        $r2 := @parameter4: android.graphics.Rect;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean hasAntiAlias()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        boolean $z0;
        android.graphics.Paint $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $z0 = virtualinvoke $r1.<android.graphics.Paint: boolean isAntiAlias()>();

        return $z0;
    }

    public boolean hasMipMap()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isCircular()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        boolean z0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        z0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        return z0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.Rect $r1;
        boolean $z0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 := @parameter0: android.graphics.Rect;

        specialinvoke $r0.<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>($r1);

        $z0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        if $z0 == 0 goto label1;

        specialinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void updateCircularCornerRadius()>();

     label1:
        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        return;
    }

    public void setAlpha(int)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0, $i1;
        android.graphics.Paint $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 := @parameter0: int;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $i1 = virtualinvoke $r1.<android.graphics.Paint: int getAlpha()>();

        if $i0 == $i1 goto label1;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>($i0);

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setAntiAlias(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        boolean $z0;
        android.graphics.Paint $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAntiAlias(boolean)>($z0);

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setCircular(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        boolean $z0;
        android.graphics.BitmapShader $r1;
        android.graphics.Paint $r2;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 := @parameter0: boolean;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular> = $z0;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        if $z0 == 0 goto label1;

        specialinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void updateCircularCornerRadius()>();

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r1);

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;

     label1:
        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void setCornerRadius(float)>(0.0F);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.ColorFilter $r1;
        android.graphics.Paint $r2;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r1);

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setCornerRadius(float)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        float $f0, $f1;
        boolean $z0;
        byte $b0;
        android.graphics.Paint $r1;
        android.graphics.BitmapShader $r2;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $f0 := @parameter0: float;

        $f1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius>;

        $b0 = $f1 cmpl $f0;

        if $b0 != 0 goto label1;

        return;

     label1:
        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular> = 0;

        $z0 = staticinvoke <androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean isGreaterThanZero(float)>($f0);

        if $z0 == 0 goto label2;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        virtualinvoke $r1.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r2);

        goto label3;

     label2:
        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(null);

     label3:
        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius> = $f0;

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setDither(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        boolean $z0;
        android.graphics.Paint $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setDither(boolean)>($z0);

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setFilterBitmap(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        boolean $z0;
        android.graphics.Paint $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setFilterBitmap(boolean)>($z0);

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setGravity(int)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0, $i1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 := @parameter0: int;

        $i1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        if $i1 == $i0 goto label1;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity> = $i0;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 1;

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setMipMap(boolean)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 := @parameter0: boolean;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setTargetDensity(int)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0, $i1;
        android.graphics.Bitmap $r1;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $i0 := @parameter0: int;

        $i1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity>;

        if $i1 == $i0 goto label3;

        if $i0 != 0 goto label1;

        $i0 = 160;

        goto label1;

     label1:
        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mTargetDensity> = $i0;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        if $r1 == null goto label2;

        specialinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void computeBitmapSize()>();

     label2:
        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void invalidateSelf()>();

     label3:
        return;
    }

    public void setTargetDensity(android.graphics.Canvas)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.graphics.Canvas $r1;
        int $i0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke $r1.<android.graphics.Canvas: int getDensity()>();

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    public void setTargetDensity(android.util.DisplayMetrics)
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        android.util.DisplayMetrics $r1;
        int $i0;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = $r1.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    void updateDstRect()
    {
        androidx.core.graphics.drawable.RoundedBitmapDrawable $r0;
        int $i0, $i1, $i2;
        android.graphics.Rect $r1, $r2;
        boolean $z0;
        float $f0, $f1, $f2;
        android.graphics.RectF $r3;
        android.graphics.BitmapShader $r4;
        android.graphics.Matrix $r5;
        android.graphics.Bitmap $r6;
        android.graphics.Paint $r7;

        $r0 := @this: androidx.core.graphics.drawable.RoundedBitmapDrawable;

        $z0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity>;

        if $z0 == 0 goto label4;

        $z0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mIsCircular>;

        if $z0 == 0 goto label1;

        $i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        $i1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        $r1 = virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect getBounds()>();

        $r2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect)>($i1, $i0, $i0, $r1, $r2);

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i1 = virtualinvoke $r1.<android.graphics.Rect: int height()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i1 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $i1 = $i1 - $i0;

        $i1 = $i1 / 2;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        $i2 = virtualinvoke $r1.<android.graphics.Rect: int height()>();

        $i2 = $i2 - $i0;

        $i2 = $i2 / 2;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke $r1.<android.graphics.Rect: void inset(int,int)>($i1, $i2);

        $f0 = (float) $i0;

        $f0 = $f0 * 0.5F;

        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: float mCornerRadius> = $f0;

        goto label2;

     label1:
        $i2 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mGravity>;

        $i0 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapWidth>;

        $i1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: int mBitmapHeight>;

        $r2 = virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect getBounds()>();

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect)>($i2, $i0, $i1, $r2, $r1);

     label2:
        $r3 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $r1 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke $r3.<android.graphics.RectF: void set(android.graphics.Rect)>($r1);

        $r4 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        if $r4 == null goto label3;

        $r5 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix>;

        $r3 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f0 = $r3.<android.graphics.RectF: float left>;

        $r3 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f1 = $r3.<android.graphics.RectF: float top>;

        virtualinvoke $r5.<android.graphics.Matrix: void setTranslate(float,float)>($f0, $f1);

        $r5 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix>;

        $r3 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f0 = virtualinvoke $r3.<android.graphics.RectF: float width()>();

        $r6 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r6.<android.graphics.Bitmap: int getWidth()>();

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

        $r3 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.RectF mDstRectF>;

        $f1 = virtualinvoke $r3.<android.graphics.RectF: float height()>();

        $r6 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r6.<android.graphics.Bitmap: int getHeight()>();

        $f2 = (float) $i0;

        $f1 = $f1 / $f2;

        virtualinvoke $r5.<android.graphics.Matrix: boolean preScale(float,float)>($f0, $f1);

        $r4 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        $r5 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Matrix mShaderMatrix>;

        virtualinvoke $r4.<android.graphics.BitmapShader: void setLocalMatrix(android.graphics.Matrix)>($r5);

        $r7 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.Paint mPaint>;

        $r4 = $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: android.graphics.BitmapShader mBitmapShader>;

        virtualinvoke $r7.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r4);

     label3:
        $r0.<androidx.core.graphics.drawable.RoundedBitmapDrawable: boolean mApplyGravity> = 0;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <androidx.core.graphics.drawable.RoundedBitmapDrawable: int DEFAULT_PAINT_FLAGS> = 3;

        return;
    }
}
