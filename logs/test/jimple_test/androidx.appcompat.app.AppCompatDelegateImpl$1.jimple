final class androidx.appcompat.app.AppCompatDelegateImpl$1 extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler
{
    final java.lang.Thread$UncaughtExceptionHandler val$defHandler;

    void <init>(java.lang.Thread$UncaughtExceptionHandler)
    {
        androidx.appcompat.app.AppCompatDelegateImpl$1 $r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;

        $r0 := @this: androidx.appcompat.app.AppCompatDelegateImpl$1;

        $r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        $r0.<androidx.appcompat.app.AppCompatDelegateImpl$1: java.lang.Thread$UncaughtExceptionHandler val$defHandler> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private boolean shouldWrapException(java.lang.Throwable)
    {
        androidx.appcompat.app.AppCompatDelegateImpl$1 $r0;
        java.lang.Throwable $r1;
        boolean $z0;
        java.lang.String $r2;

        $r0 := @this: androidx.appcompat.app.AppCompatDelegateImpl$1;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = $r1 instanceof android.content.res.Resources$NotFoundException;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("drawable");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("Drawable");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        androidx.appcompat.app.AppCompatDelegateImpl$1 $r0;
        java.lang.Thread $r1;
        java.lang.Throwable $r2, $r6;
        boolean $z0;
        android.content.res.Resources$NotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.StackTraceElement[] $r7;
        java.lang.Thread$UncaughtExceptionHandler $r8;

        $r0 := @this: androidx.appcompat.app.AppCompatDelegateImpl$1;

        $r1 := @parameter0: java.lang.Thread;

        $r2 := @parameter1: java.lang.Throwable;

        $z0 = specialinvoke $r0.<androidx.appcompat.app.AppCompatDelegateImpl$1: boolean shouldWrapException(java.lang.Throwable)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new android.content.res.Resources$NotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". If the resource you are trying to use is a vector resource, you may be referencing it in an unsupported way. See AppCompatDelegate.setCompatVectorFromResourcesEnabled() for more info.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        virtualinvoke $r3.<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        $r7 = virtualinvoke $r2.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r3.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r7);

        $r8 = $r0.<androidx.appcompat.app.AppCompatDelegateImpl$1: java.lang.Thread$UncaughtExceptionHandler val$defHandler>;

        interfaceinvoke $r8.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r3);

        return;

     label1:
        $r8 = $r0.<androidx.appcompat.app.AppCompatDelegateImpl$1: java.lang.Thread$UncaughtExceptionHandler val$defHandler>;

        interfaceinvoke $r8.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

        return;
    }
}
